
MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000026f8  0000278c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800078  00800078  000027a4  2**0
                  ALLOC
  3 .stab         00002d60  00000000  00000000  000027a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000180f  00000000  00000000  00005504  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006d13  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006e53  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009af7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a8a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000aa04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ac91  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b45f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 ca 0e 	jmp	0x1d94	; 0x1d94 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 fd 0e 	jmp	0x1dfa	; 0x1dfa <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 8d 0f 	jmp	0x1f1a	; 0x1f1a <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 9d 0f 	jmp	0x1f3a	; 0x1f3a <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ef       	ldi	r30, 0xF8	; 248
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c7 0a 	call	0x158e	; 0x158e <main>
      8a:	0c 94 7a 13 	jmp	0x26f4	; 0x26f4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 43 13 	jmp	0x2686	; 0x2686 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5f 13 	jmp	0x26be	; 0x26be <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4f 13 	jmp	0x269e	; 0x269e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4f 13 	jmp	0x269e	; 0x269e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 43 13 	jmp	0x2686	; 0x2686 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5f 13 	jmp	0x26be	; 0x26be <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4f 13 	jmp	0x269e	; 0x269e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 4f 13 	jmp	0x269e	; 0x269e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 4f 13 	jmp	0x269e	; 0x269e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 53 13 	jmp	0x26a6	; 0x26a6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 6f 13 	jmp	0x26de	; 0x26de <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <BUZZER_init>:
#include "buzzer.h"
#include "std_types.h"


void BUZZER_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	63 e0       	ldi	r22, 0x03	; 3
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <GPIO_setupPinDirection>
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <BUZZER_ON>:

void BUZZER_ON(void)
{
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
   /*Make the Buzzer Beebs*/
   GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
     b66:	83 e0       	ldi	r24, 0x03	; 3
     b68:	63 e0       	ldi	r22, 0x03	; 3
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
}
     b70:	cf 91       	pop	r28
     b72:	df 91       	pop	r29
     b74:	08 95       	ret

00000b76 <BUZZER_OFF>:

void BUZZER_OFF(void)
{
     b76:	df 93       	push	r29
     b78:	cf 93       	push	r28
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
	/*Make the Buzzer Stops*/
	 GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     b7e:	83 e0       	ldi	r24, 0x03	; 3
     b80:	63 e0       	ldi	r22, 0x03	; 3
     b82:	40 e0       	ldi	r20, 0x00	; 0
     b84:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
}
     b88:	cf 91       	pop	r28
     b8a:	df 91       	pop	r29
     b8c:	08 95       	ret

00000b8e <DCMOTOR_init>:
/*******************************************************************************
*                                                                              *
*                              FUNCTIONS Definitions                           *
*                                                                              *
********************************************************************************/
void DCMOTOR_init(void){
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DCMOTOR_PORT_ID,DCMOTOR_PINA_ID,PIN_OUTPUT);
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	41 e0       	ldi	r20, 0x01	; 1
     b9c:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR_PORT_ID,DCMOTOR_PINB_ID,PIN_OUTPUT);
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	61 e0       	ldi	r22, 0x01	; 1
     ba4:	41 e0       	ldi	r20, 0x01	; 1
     ba6:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <GPIO_setupPinDirection>

	GPIO_writePin(DCMOTOR_PORT_ID,DCMOTOR_PINA_ID,LOGIC_LOW);
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	40 e0       	ldi	r20, 0x00	; 0
     bb0:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
	GPIO_writePin(DCMOTOR_PORT_ID,DCMOTOR_PINB_ID,LOGIC_LOW);
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	61 e0       	ldi	r22, 0x01	; 1
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
}
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <DCMOTOR_rotate>:

void DCMOTOR_rotate(DCMOTOR_State state,uint8 speed){
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	00 d0       	rcall	.+0      	; 0xbca <DCMOTOR_rotate+0x6>
     bca:	00 d0       	rcall	.+0      	; 0xbcc <DCMOTOR_rotate+0x8>
     bcc:	0f 92       	push	r0
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
     bd2:	8a 83       	std	Y+2, r24	; 0x02
     bd4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 temp_duty_cycle;
	switch (state){
     bd6:	8a 81       	ldd	r24, Y+2	; 0x02
     bd8:	28 2f       	mov	r18, r24
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	3d 83       	std	Y+5, r19	; 0x05
     bde:	2c 83       	std	Y+4, r18	; 0x04
     be0:	8c 81       	ldd	r24, Y+4	; 0x04
     be2:	9d 81       	ldd	r25, Y+5	; 0x05
     be4:	81 30       	cpi	r24, 0x01	; 1
     be6:	91 05       	cpc	r25, r1
     be8:	a1 f0       	breq	.+40     	; 0xc12 <DCMOTOR_rotate+0x4e>
     bea:	2c 81       	ldd	r18, Y+4	; 0x04
     bec:	3d 81       	ldd	r19, Y+5	; 0x05
     bee:	22 30       	cpi	r18, 0x02	; 2
     bf0:	31 05       	cpc	r19, r1
     bf2:	d1 f0       	breq	.+52     	; 0xc28 <DCMOTOR_rotate+0x64>
     bf4:	8c 81       	ldd	r24, Y+4	; 0x04
     bf6:	9d 81       	ldd	r25, Y+5	; 0x05
     bf8:	00 97       	sbiw	r24, 0x00	; 0
     bfa:	01 f5       	brne	.+64     	; 0xc3c <DCMOTOR_rotate+0x78>
	case STOP :
		GPIO_writePin(DCMOTOR_PORT_ID,DCMOTOR_PINA_ID,LOGIC_LOW);
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	40 e0       	ldi	r20, 0x00	; 0
     c02:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		GPIO_writePin(DCMOTOR_PORT_ID,DCMOTOR_PINB_ID,LOGIC_LOW);
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	61 e0       	ldi	r22, 0x01	; 1
     c0a:	40 e0       	ldi	r20, 0x00	; 0
     c0c:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
     c10:	15 c0       	rjmp	.+42     	; 0xc3c <DCMOTOR_rotate+0x78>
		break;
	case CLOCK_WISE :
		GPIO_writePin(DCMOTOR_PORT_ID,DCMOTOR_PINA_ID,LOGIC_HIGH);
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	60 e0       	ldi	r22, 0x00	; 0
     c16:	41 e0       	ldi	r20, 0x01	; 1
     c18:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		GPIO_writePin(DCMOTOR_PORT_ID,DCMOTOR_PINB_ID,LOGIC_LOW);
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	61 e0       	ldi	r22, 0x01	; 1
     c20:	40 e0       	ldi	r20, 0x00	; 0
     c22:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
     c26:	0a c0       	rjmp	.+20     	; 0xc3c <DCMOTOR_rotate+0x78>
		break;
	case ANTI_CLOCK_WISE :
		GPIO_writePin(DCMOTOR_PORT_ID,DCMOTOR_PINA_ID,LOGIC_LOW);
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	60 e0       	ldi	r22, 0x00	; 0
     c2c:	40 e0       	ldi	r20, 0x00	; 0
     c2e:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		GPIO_writePin(DCMOTOR_PORT_ID,DCMOTOR_PINB_ID,LOGIC_HIGH);
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	61 e0       	ldi	r22, 0x01	; 1
     c36:	41 e0       	ldi	r20, 0x01	; 1
     c38:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		break;
	}
	temp_duty_cycle = (speed * 255) / 100 ;
     c3c:	8b 81       	ldd	r24, Y+3	; 0x03
     c3e:	48 2f       	mov	r20, r24
     c40:	50 e0       	ldi	r21, 0x00	; 0
     c42:	ca 01       	movw	r24, r20
     c44:	9c 01       	movw	r18, r24
     c46:	22 0f       	add	r18, r18
     c48:	33 1f       	adc	r19, r19
     c4a:	c9 01       	movw	r24, r18
     c4c:	96 95       	lsr	r25
     c4e:	98 2f       	mov	r25, r24
     c50:	88 27       	eor	r24, r24
     c52:	97 95       	ror	r25
     c54:	87 95       	ror	r24
     c56:	82 1b       	sub	r24, r18
     c58:	93 0b       	sbc	r25, r19
     c5a:	84 0f       	add	r24, r20
     c5c:	95 1f       	adc	r25, r21
     c5e:	24 e6       	ldi	r18, 0x64	; 100
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	b9 01       	movw	r22, r18
     c64:	0e 94 df 12 	call	0x25be	; 0x25be <__divmodhi4>
     c68:	cb 01       	movw	r24, r22
     c6a:	89 83       	std	Y+1, r24	; 0x01
	PWM_Timer0_Start(temp_duty_cycle);
     c6c:	89 81       	ldd	r24, Y+1	; 0x01
     c6e:	0e 94 13 0b 	call	0x1626	; 0x1626 <PWM_Timer0_Start>
}
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "i2c.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	00 d0       	rcall	.+0      	; 0xc88 <EEPROM_writeByte+0x6>
     c88:	00 d0       	rcall	.+0      	; 0xc8a <EEPROM_writeByte+0x8>
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
     c8e:	9a 83       	std	Y+2, r25	; 0x02
     c90:	89 83       	std	Y+1, r24	; 0x01
     c92:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     c94:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     c98:	0e 94 b8 0a 	call	0x1570	; 0x1570 <TWI_getStatus>
     c9c:	88 30       	cpi	r24, 0x08	; 8
     c9e:	11 f0       	breq	.+4      	; 0xca4 <EEPROM_writeByte+0x22>
        return ERROR;
     ca0:	1c 82       	std	Y+4, r1	; 0x04
     ca2:	28 c0       	rjmp	.+80     	; 0xcf4 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	9a 81       	ldd	r25, Y+2	; 0x02
     ca8:	80 70       	andi	r24, 0x00	; 0
     caa:	97 70       	andi	r25, 0x07	; 7
     cac:	88 0f       	add	r24, r24
     cae:	89 2f       	mov	r24, r25
     cb0:	88 1f       	adc	r24, r24
     cb2:	99 0b       	sbc	r25, r25
     cb4:	91 95       	neg	r25
     cb6:	80 6a       	ori	r24, 0xA0	; 160
     cb8:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     cbc:	0e 94 b8 0a 	call	0x1570	; 0x1570 <TWI_getStatus>
     cc0:	88 31       	cpi	r24, 0x18	; 24
     cc2:	11 f0       	breq	.+4      	; 0xcc8 <EEPROM_writeByte+0x46>
        return ERROR; 
     cc4:	1c 82       	std	Y+4, r1	; 0x04
     cc6:	16 c0       	rjmp	.+44     	; 0xcf4 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     cce:	0e 94 b8 0a 	call	0x1570	; 0x1570 <TWI_getStatus>
     cd2:	88 32       	cpi	r24, 0x28	; 40
     cd4:	11 f0       	breq	.+4      	; 0xcda <EEPROM_writeByte+0x58>
        return ERROR;
     cd6:	1c 82       	std	Y+4, r1	; 0x04
     cd8:	0d c0       	rjmp	.+26     	; 0xcf4 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
     cda:	8b 81       	ldd	r24, Y+3	; 0x03
     cdc:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     ce0:	0e 94 b8 0a 	call	0x1570	; 0x1570 <TWI_getStatus>
     ce4:	88 32       	cpi	r24, 0x28	; 40
     ce6:	11 f0       	breq	.+4      	; 0xcec <EEPROM_writeByte+0x6a>
        return ERROR;
     ce8:	1c 82       	std	Y+4, r1	; 0x04
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     cec:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <TWI_stop>
	
    return SUCCESS;
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	8c 83       	std	Y+4, r24	; 0x04
     cf4:	8c 81       	ldd	r24, Y+4	; 0x04
}
     cf6:	0f 90       	pop	r0
     cf8:	0f 90       	pop	r0
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	cf 91       	pop	r28
     d00:	df 91       	pop	r29
     d02:	08 95       	ret

00000d04 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	00 d0       	rcall	.+0      	; 0xd0a <EEPROM_readByte+0x6>
     d0a:	00 d0       	rcall	.+0      	; 0xd0c <EEPROM_readByte+0x8>
     d0c:	0f 92       	push	r0
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
     d12:	9a 83       	std	Y+2, r25	; 0x02
     d14:	89 83       	std	Y+1, r24	; 0x01
     d16:	7c 83       	std	Y+4, r23	; 0x04
     d18:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     d1a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     d1e:	0e 94 b8 0a 	call	0x1570	; 0x1570 <TWI_getStatus>
     d22:	88 30       	cpi	r24, 0x08	; 8
     d24:	11 f0       	breq	.+4      	; 0xd2a <EEPROM_readByte+0x26>
        return ERROR;
     d26:	1d 82       	std	Y+5, r1	; 0x05
     d28:	44 c0       	rjmp	.+136    	; 0xdb2 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	9a 81       	ldd	r25, Y+2	; 0x02
     d2e:	80 70       	andi	r24, 0x00	; 0
     d30:	97 70       	andi	r25, 0x07	; 7
     d32:	88 0f       	add	r24, r24
     d34:	89 2f       	mov	r24, r25
     d36:	88 1f       	adc	r24, r24
     d38:	99 0b       	sbc	r25, r25
     d3a:	91 95       	neg	r25
     d3c:	80 6a       	ori	r24, 0xA0	; 160
     d3e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     d42:	0e 94 b8 0a 	call	0x1570	; 0x1570 <TWI_getStatus>
     d46:	88 31       	cpi	r24, 0x18	; 24
     d48:	11 f0       	breq	.+4      	; 0xd4e <EEPROM_readByte+0x4a>
        return ERROR;
     d4a:	1d 82       	std	Y+5, r1	; 0x05
     d4c:	32 c0       	rjmp	.+100    	; 0xdb2 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     d54:	0e 94 b8 0a 	call	0x1570	; 0x1570 <TWI_getStatus>
     d58:	88 32       	cpi	r24, 0x28	; 40
     d5a:	11 f0       	breq	.+4      	; 0xd60 <EEPROM_readByte+0x5c>
        return ERROR;
     d5c:	1d 82       	std	Y+5, r1	; 0x05
     d5e:	29 c0       	rjmp	.+82     	; 0xdb2 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     d60:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     d64:	0e 94 b8 0a 	call	0x1570	; 0x1570 <TWI_getStatus>
     d68:	80 31       	cpi	r24, 0x10	; 16
     d6a:	11 f0       	breq	.+4      	; 0xd70 <EEPROM_readByte+0x6c>
        return ERROR;
     d6c:	1d 82       	std	Y+5, r1	; 0x05
     d6e:	21 c0       	rjmp	.+66     	; 0xdb2 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	9a 81       	ldd	r25, Y+2	; 0x02
     d74:	80 70       	andi	r24, 0x00	; 0
     d76:	97 70       	andi	r25, 0x07	; 7
     d78:	88 0f       	add	r24, r24
     d7a:	89 2f       	mov	r24, r25
     d7c:	88 1f       	adc	r24, r24
     d7e:	99 0b       	sbc	r25, r25
     d80:	91 95       	neg	r25
     d82:	81 6a       	ori	r24, 0xA1	; 161
     d84:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     d88:	0e 94 b8 0a 	call	0x1570	; 0x1570 <TWI_getStatus>
     d8c:	80 34       	cpi	r24, 0x40	; 64
     d8e:	11 f0       	breq	.+4      	; 0xd94 <EEPROM_readByte+0x90>
        return ERROR;
     d90:	1d 82       	std	Y+5, r1	; 0x05
     d92:	0f c0       	rjmp	.+30     	; 0xdb2 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
     d94:	0e 94 a5 0a 	call	0x154a	; 0x154a <TWI_readByteWithNACK>
     d98:	eb 81       	ldd	r30, Y+3	; 0x03
     d9a:	fc 81       	ldd	r31, Y+4	; 0x04
     d9c:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
     d9e:	0e 94 b8 0a 	call	0x1570	; 0x1570 <TWI_getStatus>
     da2:	88 35       	cpi	r24, 0x58	; 88
     da4:	11 f0       	breq	.+4      	; 0xdaa <EEPROM_readByte+0xa6>
        return ERROR;
     da6:	1d 82       	std	Y+5, r1	; 0x05
     da8:	04 c0       	rjmp	.+8      	; 0xdb2 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     daa:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <TWI_stop>

    return SUCCESS;
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	8d 83       	std	Y+5, r24	; 0x05
     db2:	8d 81       	ldd	r24, Y+5	; 0x05
}
     db4:	0f 90       	pop	r0
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	cf 91       	pop	r28
     dc0:	df 91       	pop	r29
     dc2:	08 95       	ret

00000dc4 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     dc4:	df 93       	push	r29
     dc6:	cf 93       	push	r28
     dc8:	00 d0       	rcall	.+0      	; 0xdca <GPIO_setupPinDirection+0x6>
     dca:	00 d0       	rcall	.+0      	; 0xdcc <GPIO_setupPinDirection+0x8>
     dcc:	0f 92       	push	r0
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	89 83       	std	Y+1, r24	; 0x01
     dd4:	6a 83       	std	Y+2, r22	; 0x02
     dd6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     dd8:	8a 81       	ldd	r24, Y+2	; 0x02
     dda:	88 30       	cpi	r24, 0x08	; 8
     ddc:	08 f0       	brcs	.+2      	; 0xde0 <GPIO_setupPinDirection+0x1c>
     dde:	d5 c0       	rjmp	.+426    	; 0xf8a <GPIO_setupPinDirection+0x1c6>
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	84 30       	cpi	r24, 0x04	; 4
     de4:	08 f0       	brcs	.+2      	; 0xde8 <GPIO_setupPinDirection+0x24>
     de6:	d1 c0       	rjmp	.+418    	; 0xf8a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	28 2f       	mov	r18, r24
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	3d 83       	std	Y+5, r19	; 0x05
     df0:	2c 83       	std	Y+4, r18	; 0x04
     df2:	8c 81       	ldd	r24, Y+4	; 0x04
     df4:	9d 81       	ldd	r25, Y+5	; 0x05
     df6:	81 30       	cpi	r24, 0x01	; 1
     df8:	91 05       	cpc	r25, r1
     dfa:	09 f4       	brne	.+2      	; 0xdfe <GPIO_setupPinDirection+0x3a>
     dfc:	43 c0       	rjmp	.+134    	; 0xe84 <GPIO_setupPinDirection+0xc0>
     dfe:	2c 81       	ldd	r18, Y+4	; 0x04
     e00:	3d 81       	ldd	r19, Y+5	; 0x05
     e02:	22 30       	cpi	r18, 0x02	; 2
     e04:	31 05       	cpc	r19, r1
     e06:	2c f4       	brge	.+10     	; 0xe12 <GPIO_setupPinDirection+0x4e>
     e08:	8c 81       	ldd	r24, Y+4	; 0x04
     e0a:	9d 81       	ldd	r25, Y+5	; 0x05
     e0c:	00 97       	sbiw	r24, 0x00	; 0
     e0e:	71 f0       	breq	.+28     	; 0xe2c <GPIO_setupPinDirection+0x68>
     e10:	bc c0       	rjmp	.+376    	; 0xf8a <GPIO_setupPinDirection+0x1c6>
     e12:	2c 81       	ldd	r18, Y+4	; 0x04
     e14:	3d 81       	ldd	r19, Y+5	; 0x05
     e16:	22 30       	cpi	r18, 0x02	; 2
     e18:	31 05       	cpc	r19, r1
     e1a:	09 f4       	brne	.+2      	; 0xe1e <GPIO_setupPinDirection+0x5a>
     e1c:	5f c0       	rjmp	.+190    	; 0xedc <GPIO_setupPinDirection+0x118>
     e1e:	8c 81       	ldd	r24, Y+4	; 0x04
     e20:	9d 81       	ldd	r25, Y+5	; 0x05
     e22:	83 30       	cpi	r24, 0x03	; 3
     e24:	91 05       	cpc	r25, r1
     e26:	09 f4       	brne	.+2      	; 0xe2a <GPIO_setupPinDirection+0x66>
     e28:	85 c0       	rjmp	.+266    	; 0xf34 <GPIO_setupPinDirection+0x170>
     e2a:	af c0       	rjmp	.+350    	; 0xf8a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     e2c:	8b 81       	ldd	r24, Y+3	; 0x03
     e2e:	81 30       	cpi	r24, 0x01	; 1
     e30:	a1 f4       	brne	.+40     	; 0xe5a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     e32:	aa e3       	ldi	r26, 0x3A	; 58
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	ea e3       	ldi	r30, 0x3A	; 58
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	48 2f       	mov	r20, r24
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	28 2f       	mov	r18, r24
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	02 2e       	mov	r0, r18
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <GPIO_setupPinDirection+0x8c>
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	0a 94       	dec	r0
     e52:	e2 f7       	brpl	.-8      	; 0xe4c <GPIO_setupPinDirection+0x88>
     e54:	84 2b       	or	r24, r20
     e56:	8c 93       	st	X, r24
     e58:	98 c0       	rjmp	.+304    	; 0xf8a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     e5a:	aa e3       	ldi	r26, 0x3A	; 58
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	ea e3       	ldi	r30, 0x3A	; 58
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	48 2f       	mov	r20, r24
     e66:	8a 81       	ldd	r24, Y+2	; 0x02
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	02 2e       	mov	r0, r18
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <GPIO_setupPinDirection+0xb4>
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	0a 94       	dec	r0
     e7a:	e2 f7       	brpl	.-8      	; 0xe74 <GPIO_setupPinDirection+0xb0>
     e7c:	80 95       	com	r24
     e7e:	84 23       	and	r24, r20
     e80:	8c 93       	st	X, r24
     e82:	83 c0       	rjmp	.+262    	; 0xf8a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     e84:	8b 81       	ldd	r24, Y+3	; 0x03
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	a1 f4       	brne	.+40     	; 0xeb2 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     e8a:	a7 e3       	ldi	r26, 0x37	; 55
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e7 e3       	ldi	r30, 0x37	; 55
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	48 2f       	mov	r20, r24
     e96:	8a 81       	ldd	r24, Y+2	; 0x02
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	02 2e       	mov	r0, r18
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <GPIO_setupPinDirection+0xe4>
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	0a 94       	dec	r0
     eaa:	e2 f7       	brpl	.-8      	; 0xea4 <GPIO_setupPinDirection+0xe0>
     eac:	84 2b       	or	r24, r20
     eae:	8c 93       	st	X, r24
     eb0:	6c c0       	rjmp	.+216    	; 0xf8a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     eb2:	a7 e3       	ldi	r26, 0x37	; 55
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	e7 e3       	ldi	r30, 0x37	; 55
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	48 2f       	mov	r20, r24
     ebe:	8a 81       	ldd	r24, Y+2	; 0x02
     ec0:	28 2f       	mov	r18, r24
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	02 2e       	mov	r0, r18
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <GPIO_setupPinDirection+0x10c>
     ecc:	88 0f       	add	r24, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	0a 94       	dec	r0
     ed2:	e2 f7       	brpl	.-8      	; 0xecc <GPIO_setupPinDirection+0x108>
     ed4:	80 95       	com	r24
     ed6:	84 23       	and	r24, r20
     ed8:	8c 93       	st	X, r24
     eda:	57 c0       	rjmp	.+174    	; 0xf8a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	81 30       	cpi	r24, 0x01	; 1
     ee0:	a1 f4       	brne	.+40     	; 0xf0a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     ee2:	a4 e3       	ldi	r26, 0x34	; 52
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e4 e3       	ldi	r30, 0x34	; 52
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	48 2f       	mov	r20, r24
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	02 2e       	mov	r0, r18
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <GPIO_setupPinDirection+0x13c>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <GPIO_setupPinDirection+0x138>
     f04:	84 2b       	or	r24, r20
     f06:	8c 93       	st	X, r24
     f08:	40 c0       	rjmp	.+128    	; 0xf8a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     f0a:	a4 e3       	ldi	r26, 0x34	; 52
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e4 e3       	ldi	r30, 0x34	; 52
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	48 2f       	mov	r20, r24
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	02 2e       	mov	r0, r18
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <GPIO_setupPinDirection+0x164>
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	0a 94       	dec	r0
     f2a:	e2 f7       	brpl	.-8      	; 0xf24 <GPIO_setupPinDirection+0x160>
     f2c:	80 95       	com	r24
     f2e:	84 23       	and	r24, r20
     f30:	8c 93       	st	X, r24
     f32:	2b c0       	rjmp	.+86     	; 0xf8a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	a1 f4       	brne	.+40     	; 0xf62 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     f3a:	a1 e3       	ldi	r26, 0x31	; 49
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e1 e3       	ldi	r30, 0x31	; 49
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	48 2f       	mov	r20, r24
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	02 2e       	mov	r0, r18
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <GPIO_setupPinDirection+0x194>
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	0a 94       	dec	r0
     f5a:	e2 f7       	brpl	.-8      	; 0xf54 <GPIO_setupPinDirection+0x190>
     f5c:	84 2b       	or	r24, r20
     f5e:	8c 93       	st	X, r24
     f60:	14 c0       	rjmp	.+40     	; 0xf8a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     f62:	a1 e3       	ldi	r26, 0x31	; 49
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e1 e3       	ldi	r30, 0x31	; 49
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	48 2f       	mov	r20, r24
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	02 2e       	mov	r0, r18
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <GPIO_setupPinDirection+0x1bc>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	0a 94       	dec	r0
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <GPIO_setupPinDirection+0x1b8>
     f84:	80 95       	com	r24
     f86:	84 23       	and	r24, r20
     f88:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <GPIO_writePin+0x6>
     fa0:	00 d0       	rcall	.+0      	; 0xfa2 <GPIO_writePin+0x8>
     fa2:	0f 92       	push	r0
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
     fa8:	89 83       	std	Y+1, r24	; 0x01
     faa:	6a 83       	std	Y+2, r22	; 0x02
     fac:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	88 30       	cpi	r24, 0x08	; 8
     fb2:	08 f0       	brcs	.+2      	; 0xfb6 <GPIO_writePin+0x1c>
     fb4:	d5 c0       	rjmp	.+426    	; 0x1160 <GPIO_writePin+0x1c6>
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	84 30       	cpi	r24, 0x04	; 4
     fba:	08 f0       	brcs	.+2      	; 0xfbe <GPIO_writePin+0x24>
     fbc:	d1 c0       	rjmp	.+418    	; 0x1160 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	3d 83       	std	Y+5, r19	; 0x05
     fc6:	2c 83       	std	Y+4, r18	; 0x04
     fc8:	8c 81       	ldd	r24, Y+4	; 0x04
     fca:	9d 81       	ldd	r25, Y+5	; 0x05
     fcc:	81 30       	cpi	r24, 0x01	; 1
     fce:	91 05       	cpc	r25, r1
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <GPIO_writePin+0x3a>
     fd2:	43 c0       	rjmp	.+134    	; 0x105a <GPIO_writePin+0xc0>
     fd4:	2c 81       	ldd	r18, Y+4	; 0x04
     fd6:	3d 81       	ldd	r19, Y+5	; 0x05
     fd8:	22 30       	cpi	r18, 0x02	; 2
     fda:	31 05       	cpc	r19, r1
     fdc:	2c f4       	brge	.+10     	; 0xfe8 <GPIO_writePin+0x4e>
     fde:	8c 81       	ldd	r24, Y+4	; 0x04
     fe0:	9d 81       	ldd	r25, Y+5	; 0x05
     fe2:	00 97       	sbiw	r24, 0x00	; 0
     fe4:	71 f0       	breq	.+28     	; 0x1002 <GPIO_writePin+0x68>
     fe6:	bc c0       	rjmp	.+376    	; 0x1160 <GPIO_writePin+0x1c6>
     fe8:	2c 81       	ldd	r18, Y+4	; 0x04
     fea:	3d 81       	ldd	r19, Y+5	; 0x05
     fec:	22 30       	cpi	r18, 0x02	; 2
     fee:	31 05       	cpc	r19, r1
     ff0:	09 f4       	brne	.+2      	; 0xff4 <GPIO_writePin+0x5a>
     ff2:	5f c0       	rjmp	.+190    	; 0x10b2 <GPIO_writePin+0x118>
     ff4:	8c 81       	ldd	r24, Y+4	; 0x04
     ff6:	9d 81       	ldd	r25, Y+5	; 0x05
     ff8:	83 30       	cpi	r24, 0x03	; 3
     ffa:	91 05       	cpc	r25, r1
     ffc:	09 f4       	brne	.+2      	; 0x1000 <GPIO_writePin+0x66>
     ffe:	85 c0       	rjmp	.+266    	; 0x110a <GPIO_writePin+0x170>
    1000:	af c0       	rjmp	.+350    	; 0x1160 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	81 30       	cpi	r24, 0x01	; 1
    1006:	a1 f4       	brne	.+40     	; 0x1030 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1008:	ab e3       	ldi	r26, 0x3B	; 59
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	eb e3       	ldi	r30, 0x3B	; 59
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 2e       	mov	r0, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <GPIO_writePin+0x8c>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	0a 94       	dec	r0
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <GPIO_writePin+0x88>
    102a:	84 2b       	or	r24, r20
    102c:	8c 93       	st	X, r24
    102e:	98 c0       	rjmp	.+304    	; 0x1160 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1030:	ab e3       	ldi	r26, 0x3B	; 59
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	eb e3       	ldi	r30, 0x3B	; 59
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	48 2f       	mov	r20, r24
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	02 2e       	mov	r0, r18
    1048:	02 c0       	rjmp	.+4      	; 0x104e <GPIO_writePin+0xb4>
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	0a 94       	dec	r0
    1050:	e2 f7       	brpl	.-8      	; 0x104a <GPIO_writePin+0xb0>
    1052:	80 95       	com	r24
    1054:	84 23       	and	r24, r20
    1056:	8c 93       	st	X, r24
    1058:	83 c0       	rjmp	.+262    	; 0x1160 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	81 30       	cpi	r24, 0x01	; 1
    105e:	a1 f4       	brne	.+40     	; 0x1088 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1060:	a8 e3       	ldi	r26, 0x38	; 56
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e8 e3       	ldi	r30, 0x38	; 56
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	48 2f       	mov	r20, r24
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	02 2e       	mov	r0, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <GPIO_writePin+0xe4>
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	0a 94       	dec	r0
    1080:	e2 f7       	brpl	.-8      	; 0x107a <GPIO_writePin+0xe0>
    1082:	84 2b       	or	r24, r20
    1084:	8c 93       	st	X, r24
    1086:	6c c0       	rjmp	.+216    	; 0x1160 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1088:	a8 e3       	ldi	r26, 0x38	; 56
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e8 e3       	ldi	r30, 0x38	; 56
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	48 2f       	mov	r20, r24
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	02 2e       	mov	r0, r18
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <GPIO_writePin+0x10c>
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	0a 94       	dec	r0
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <GPIO_writePin+0x108>
    10aa:	80 95       	com	r24
    10ac:	84 23       	and	r24, r20
    10ae:	8c 93       	st	X, r24
    10b0:	57 c0       	rjmp	.+174    	; 0x1160 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	81 30       	cpi	r24, 0x01	; 1
    10b6:	a1 f4       	brne	.+40     	; 0x10e0 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    10b8:	a5 e3       	ldi	r26, 0x35	; 53
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e5 e3       	ldi	r30, 0x35	; 53
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	48 2f       	mov	r20, r24
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	02 2e       	mov	r0, r18
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <GPIO_writePin+0x13c>
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	0a 94       	dec	r0
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <GPIO_writePin+0x138>
    10da:	84 2b       	or	r24, r20
    10dc:	8c 93       	st	X, r24
    10de:	40 c0       	rjmp	.+128    	; 0x1160 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    10e0:	a5 e3       	ldi	r26, 0x35	; 53
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e5 e3       	ldi	r30, 0x35	; 53
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	48 2f       	mov	r20, r24
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	02 2e       	mov	r0, r18
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <GPIO_writePin+0x164>
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	0a 94       	dec	r0
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <GPIO_writePin+0x160>
    1102:	80 95       	com	r24
    1104:	84 23       	and	r24, r20
    1106:	8c 93       	st	X, r24
    1108:	2b c0       	rjmp	.+86     	; 0x1160 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	81 30       	cpi	r24, 0x01	; 1
    110e:	a1 f4       	brne	.+40     	; 0x1138 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1110:	a2 e3       	ldi	r26, 0x32	; 50
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e2 e3       	ldi	r30, 0x32	; 50
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	48 2f       	mov	r20, r24
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	02 2e       	mov	r0, r18
    1128:	02 c0       	rjmp	.+4      	; 0x112e <GPIO_writePin+0x194>
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	0a 94       	dec	r0
    1130:	e2 f7       	brpl	.-8      	; 0x112a <GPIO_writePin+0x190>
    1132:	84 2b       	or	r24, r20
    1134:	8c 93       	st	X, r24
    1136:	14 c0       	rjmp	.+40     	; 0x1160 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1138:	a2 e3       	ldi	r26, 0x32	; 50
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e2 e3       	ldi	r30, 0x32	; 50
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	48 2f       	mov	r20, r24
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 2e       	mov	r0, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <GPIO_writePin+0x1bc>
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	0a 94       	dec	r0
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <GPIO_writePin+0x1b8>
    115a:	80 95       	com	r24
    115c:	84 23       	and	r24, r20
    115e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	00 d0       	rcall	.+0      	; 0x1176 <GPIO_readPin+0x6>
    1176:	00 d0       	rcall	.+0      	; 0x1178 <GPIO_readPin+0x8>
    1178:	0f 92       	push	r0
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	8a 83       	std	Y+2, r24	; 0x02
    1180:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1182:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	88 30       	cpi	r24, 0x08	; 8
    1188:	08 f0       	brcs	.+2      	; 0x118c <GPIO_readPin+0x1c>
    118a:	84 c0       	rjmp	.+264    	; 0x1294 <GPIO_readPin+0x124>
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	84 30       	cpi	r24, 0x04	; 4
    1190:	08 f0       	brcs	.+2      	; 0x1194 <GPIO_readPin+0x24>
    1192:	80 c0       	rjmp	.+256    	; 0x1294 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	3d 83       	std	Y+5, r19	; 0x05
    119c:	2c 83       	std	Y+4, r18	; 0x04
    119e:	4c 81       	ldd	r20, Y+4	; 0x04
    11a0:	5d 81       	ldd	r21, Y+5	; 0x05
    11a2:	41 30       	cpi	r20, 0x01	; 1
    11a4:	51 05       	cpc	r21, r1
    11a6:	79 f1       	breq	.+94     	; 0x1206 <GPIO_readPin+0x96>
    11a8:	8c 81       	ldd	r24, Y+4	; 0x04
    11aa:	9d 81       	ldd	r25, Y+5	; 0x05
    11ac:	82 30       	cpi	r24, 0x02	; 2
    11ae:	91 05       	cpc	r25, r1
    11b0:	34 f4       	brge	.+12     	; 0x11be <GPIO_readPin+0x4e>
    11b2:	2c 81       	ldd	r18, Y+4	; 0x04
    11b4:	3d 81       	ldd	r19, Y+5	; 0x05
    11b6:	21 15       	cp	r18, r1
    11b8:	31 05       	cpc	r19, r1
    11ba:	69 f0       	breq	.+26     	; 0x11d6 <GPIO_readPin+0x66>
    11bc:	6b c0       	rjmp	.+214    	; 0x1294 <GPIO_readPin+0x124>
    11be:	4c 81       	ldd	r20, Y+4	; 0x04
    11c0:	5d 81       	ldd	r21, Y+5	; 0x05
    11c2:	42 30       	cpi	r20, 0x02	; 2
    11c4:	51 05       	cpc	r21, r1
    11c6:	b9 f1       	breq	.+110    	; 0x1236 <GPIO_readPin+0xc6>
    11c8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ca:	9d 81       	ldd	r25, Y+5	; 0x05
    11cc:	83 30       	cpi	r24, 0x03	; 3
    11ce:	91 05       	cpc	r25, r1
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <GPIO_readPin+0x64>
    11d2:	49 c0       	rjmp	.+146    	; 0x1266 <GPIO_readPin+0xf6>
    11d4:	5f c0       	rjmp	.+190    	; 0x1294 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    11d6:	e9 e3       	ldi	r30, 0x39	; 57
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	88 2f       	mov	r24, r24
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	a9 01       	movw	r20, r18
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <GPIO_readPin+0x7e>
    11ea:	55 95       	asr	r21
    11ec:	47 95       	ror	r20
    11ee:	8a 95       	dec	r24
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <GPIO_readPin+0x7a>
    11f2:	ca 01       	movw	r24, r20
    11f4:	81 70       	andi	r24, 0x01	; 1
    11f6:	90 70       	andi	r25, 0x00	; 0
    11f8:	88 23       	and	r24, r24
    11fa:	19 f0       	breq	.+6      	; 0x1202 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	89 83       	std	Y+1, r24	; 0x01
    1200:	49 c0       	rjmp	.+146    	; 0x1294 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1202:	19 82       	std	Y+1, r1	; 0x01
    1204:	47 c0       	rjmp	.+142    	; 0x1294 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1206:	e6 e3       	ldi	r30, 0x36	; 54
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	88 2f       	mov	r24, r24
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	a9 01       	movw	r20, r18
    1218:	02 c0       	rjmp	.+4      	; 0x121e <GPIO_readPin+0xae>
    121a:	55 95       	asr	r21
    121c:	47 95       	ror	r20
    121e:	8a 95       	dec	r24
    1220:	e2 f7       	brpl	.-8      	; 0x121a <GPIO_readPin+0xaa>
    1222:	ca 01       	movw	r24, r20
    1224:	81 70       	andi	r24, 0x01	; 1
    1226:	90 70       	andi	r25, 0x00	; 0
    1228:	88 23       	and	r24, r24
    122a:	19 f0       	breq	.+6      	; 0x1232 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	89 83       	std	Y+1, r24	; 0x01
    1230:	31 c0       	rjmp	.+98     	; 0x1294 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1232:	19 82       	std	Y+1, r1	; 0x01
    1234:	2f c0       	rjmp	.+94     	; 0x1294 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1236:	e3 e3       	ldi	r30, 0x33	; 51
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	88 2f       	mov	r24, r24
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	a9 01       	movw	r20, r18
    1248:	02 c0       	rjmp	.+4      	; 0x124e <GPIO_readPin+0xde>
    124a:	55 95       	asr	r21
    124c:	47 95       	ror	r20
    124e:	8a 95       	dec	r24
    1250:	e2 f7       	brpl	.-8      	; 0x124a <GPIO_readPin+0xda>
    1252:	ca 01       	movw	r24, r20
    1254:	81 70       	andi	r24, 0x01	; 1
    1256:	90 70       	andi	r25, 0x00	; 0
    1258:	88 23       	and	r24, r24
    125a:	19 f0       	breq	.+6      	; 0x1262 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	89 83       	std	Y+1, r24	; 0x01
    1260:	19 c0       	rjmp	.+50     	; 0x1294 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1262:	19 82       	std	Y+1, r1	; 0x01
    1264:	17 c0       	rjmp	.+46     	; 0x1294 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1266:	e0 e3       	ldi	r30, 0x30	; 48
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	88 2f       	mov	r24, r24
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	a9 01       	movw	r20, r18
    1278:	02 c0       	rjmp	.+4      	; 0x127e <GPIO_readPin+0x10e>
    127a:	55 95       	asr	r21
    127c:	47 95       	ror	r20
    127e:	8a 95       	dec	r24
    1280:	e2 f7       	brpl	.-8      	; 0x127a <GPIO_readPin+0x10a>
    1282:	ca 01       	movw	r24, r20
    1284:	81 70       	andi	r24, 0x01	; 1
    1286:	90 70       	andi	r25, 0x00	; 0
    1288:	88 23       	and	r24, r24
    128a:	19 f0       	breq	.+6      	; 0x1292 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	89 83       	std	Y+1, r24	; 0x01
    1290:	01 c0       	rjmp	.+2      	; 0x1294 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1292:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1294:	89 81       	ldd	r24, Y+1	; 0x01
}
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <GPIO_setupPortDirection+0x6>
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <GPIO_setupPortDirection+0x8>
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	89 83       	std	Y+1, r24	; 0x01
    12b4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	84 30       	cpi	r24, 0x04	; 4
    12ba:	90 f5       	brcc	.+100    	; 0x1320 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	3c 83       	std	Y+4, r19	; 0x04
    12c4:	2b 83       	std	Y+3, r18	; 0x03
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ca:	81 30       	cpi	r24, 0x01	; 1
    12cc:	91 05       	cpc	r25, r1
    12ce:	d1 f0       	breq	.+52     	; 0x1304 <GPIO_setupPortDirection+0x5e>
    12d0:	2b 81       	ldd	r18, Y+3	; 0x03
    12d2:	3c 81       	ldd	r19, Y+4	; 0x04
    12d4:	22 30       	cpi	r18, 0x02	; 2
    12d6:	31 05       	cpc	r19, r1
    12d8:	2c f4       	brge	.+10     	; 0x12e4 <GPIO_setupPortDirection+0x3e>
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	9c 81       	ldd	r25, Y+4	; 0x04
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	61 f0       	breq	.+24     	; 0x12fa <GPIO_setupPortDirection+0x54>
    12e2:	1e c0       	rjmp	.+60     	; 0x1320 <GPIO_setupPortDirection+0x7a>
    12e4:	2b 81       	ldd	r18, Y+3	; 0x03
    12e6:	3c 81       	ldd	r19, Y+4	; 0x04
    12e8:	22 30       	cpi	r18, 0x02	; 2
    12ea:	31 05       	cpc	r19, r1
    12ec:	81 f0       	breq	.+32     	; 0x130e <GPIO_setupPortDirection+0x68>
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	9c 81       	ldd	r25, Y+4	; 0x04
    12f2:	83 30       	cpi	r24, 0x03	; 3
    12f4:	91 05       	cpc	r25, r1
    12f6:	81 f0       	breq	.+32     	; 0x1318 <GPIO_setupPortDirection+0x72>
    12f8:	13 c0       	rjmp	.+38     	; 0x1320 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    12fa:	ea e3       	ldi	r30, 0x3A	; 58
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	80 83       	st	Z, r24
    1302:	0e c0       	rjmp	.+28     	; 0x1320 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1304:	e7 e3       	ldi	r30, 0x37	; 55
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	80 83       	st	Z, r24
    130c:	09 c0       	rjmp	.+18     	; 0x1320 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    130e:	e4 e3       	ldi	r30, 0x34	; 52
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	80 83       	st	Z, r24
    1316:	04 c0       	rjmp	.+8      	; 0x1320 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1318:	e1 e3       	ldi	r30, 0x31	; 49
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	cf 91       	pop	r28
    132a:	df 91       	pop	r29
    132c:	08 95       	ret

0000132e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	00 d0       	rcall	.+0      	; 0x1334 <GPIO_writePort+0x6>
    1334:	00 d0       	rcall	.+0      	; 0x1336 <GPIO_writePort+0x8>
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	89 83       	std	Y+1, r24	; 0x01
    133c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	84 30       	cpi	r24, 0x04	; 4
    1342:	90 f5       	brcc	.+100    	; 0x13a8 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	3c 83       	std	Y+4, r19	; 0x04
    134c:	2b 83       	std	Y+3, r18	; 0x03
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	9c 81       	ldd	r25, Y+4	; 0x04
    1352:	81 30       	cpi	r24, 0x01	; 1
    1354:	91 05       	cpc	r25, r1
    1356:	d1 f0       	breq	.+52     	; 0x138c <GPIO_writePort+0x5e>
    1358:	2b 81       	ldd	r18, Y+3	; 0x03
    135a:	3c 81       	ldd	r19, Y+4	; 0x04
    135c:	22 30       	cpi	r18, 0x02	; 2
    135e:	31 05       	cpc	r19, r1
    1360:	2c f4       	brge	.+10     	; 0x136c <GPIO_writePort+0x3e>
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
    1364:	9c 81       	ldd	r25, Y+4	; 0x04
    1366:	00 97       	sbiw	r24, 0x00	; 0
    1368:	61 f0       	breq	.+24     	; 0x1382 <GPIO_writePort+0x54>
    136a:	1e c0       	rjmp	.+60     	; 0x13a8 <GPIO_writePort+0x7a>
    136c:	2b 81       	ldd	r18, Y+3	; 0x03
    136e:	3c 81       	ldd	r19, Y+4	; 0x04
    1370:	22 30       	cpi	r18, 0x02	; 2
    1372:	31 05       	cpc	r19, r1
    1374:	81 f0       	breq	.+32     	; 0x1396 <GPIO_writePort+0x68>
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	9c 81       	ldd	r25, Y+4	; 0x04
    137a:	83 30       	cpi	r24, 0x03	; 3
    137c:	91 05       	cpc	r25, r1
    137e:	81 f0       	breq	.+32     	; 0x13a0 <GPIO_writePort+0x72>
    1380:	13 c0       	rjmp	.+38     	; 0x13a8 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1382:	eb e3       	ldi	r30, 0x3B	; 59
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	80 83       	st	Z, r24
    138a:	0e c0       	rjmp	.+28     	; 0x13a8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    138c:	e8 e3       	ldi	r30, 0x38	; 56
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	80 83       	st	Z, r24
    1394:	09 c0       	rjmp	.+18     	; 0x13a8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1396:	e5 e3       	ldi	r30, 0x35	; 53
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	80 83       	st	Z, r24
    139e:	04 c0       	rjmp	.+8      	; 0x13a8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    13a0:	e2 e3       	ldi	r30, 0x32	; 50
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	80 83       	st	Z, r24
			break;
		}
	}
}
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	08 95       	ret

000013b6 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	00 d0       	rcall	.+0      	; 0x13bc <GPIO_readPort+0x6>
    13bc:	00 d0       	rcall	.+0      	; 0x13be <GPIO_readPort+0x8>
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    13c2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    13c4:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	84 30       	cpi	r24, 0x04	; 4
    13ca:	90 f5       	brcc	.+100    	; 0x1430 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	3c 83       	std	Y+4, r19	; 0x04
    13d4:	2b 83       	std	Y+3, r18	; 0x03
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	9c 81       	ldd	r25, Y+4	; 0x04
    13da:	81 30       	cpi	r24, 0x01	; 1
    13dc:	91 05       	cpc	r25, r1
    13de:	d1 f0       	breq	.+52     	; 0x1414 <GPIO_readPort+0x5e>
    13e0:	2b 81       	ldd	r18, Y+3	; 0x03
    13e2:	3c 81       	ldd	r19, Y+4	; 0x04
    13e4:	22 30       	cpi	r18, 0x02	; 2
    13e6:	31 05       	cpc	r19, r1
    13e8:	2c f4       	brge	.+10     	; 0x13f4 <GPIO_readPort+0x3e>
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	9c 81       	ldd	r25, Y+4	; 0x04
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	61 f0       	breq	.+24     	; 0x140a <GPIO_readPort+0x54>
    13f2:	1e c0       	rjmp	.+60     	; 0x1430 <GPIO_readPort+0x7a>
    13f4:	2b 81       	ldd	r18, Y+3	; 0x03
    13f6:	3c 81       	ldd	r19, Y+4	; 0x04
    13f8:	22 30       	cpi	r18, 0x02	; 2
    13fa:	31 05       	cpc	r19, r1
    13fc:	81 f0       	breq	.+32     	; 0x141e <GPIO_readPort+0x68>
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	9c 81       	ldd	r25, Y+4	; 0x04
    1402:	83 30       	cpi	r24, 0x03	; 3
    1404:	91 05       	cpc	r25, r1
    1406:	81 f0       	breq	.+32     	; 0x1428 <GPIO_readPort+0x72>
    1408:	13 c0       	rjmp	.+38     	; 0x1430 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    140a:	e9 e3       	ldi	r30, 0x39	; 57
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	89 83       	std	Y+1, r24	; 0x01
    1412:	0e c0       	rjmp	.+28     	; 0x1430 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1414:	e6 e3       	ldi	r30, 0x36	; 54
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	89 83       	std	Y+1, r24	; 0x01
    141c:	09 c0       	rjmp	.+18     	; 0x1430 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    141e:	e3 e3       	ldi	r30, 0x33	; 51
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	89 83       	std	Y+1, r24	; 0x01
    1426:	04 c0       	rjmp	.+8      	; 0x1430 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1428:	e0 e3       	ldi	r30, 0x30	; 48
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1430:	89 81       	ldd	r24, Y+1	; 0x01
}
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	cf 91       	pop	r28
    143c:	df 91       	pop	r29
    143e:	08 95       	ret

00001440 <TWI_init>:
#include "i2c.h"
#include "std_types.h"
#include "common_macros.h"

void TWI_init(const TWI_ConfigType* config_ptr)
{
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	00 d0       	rcall	.+0      	; 0x1446 <TWI_init+0x6>
    1446:	00 d0       	rcall	.+0      	; 0x1448 <TWI_init+0x8>
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
    144c:	9c 83       	std	Y+4, r25	; 0x04
    144e:	8b 83       	std	Y+3, r24	; 0x03
    /*using zero pre-scaler TWPS=00  */

	uint16 TWBR_value=((FREQ_CPU/config_ptr->bit_rate)-16)/2;
    1450:	eb 81       	ldd	r30, Y+3	; 0x03
    1452:	fc 81       	ldd	r31, Y+4	; 0x04
    1454:	81 81       	ldd	r24, Z+1	; 0x01
    1456:	92 81       	ldd	r25, Z+2	; 0x02
    1458:	9c 01       	movw	r18, r24
    145a:	40 e0       	ldi	r20, 0x00	; 0
    145c:	50 e0       	ldi	r21, 0x00	; 0
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	92 e1       	ldi	r25, 0x12	; 18
    1462:	aa e7       	ldi	r26, 0x7A	; 122
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	bc 01       	movw	r22, r24
    1468:	cd 01       	movw	r24, r26
    146a:	0e 94 14 13 	call	0x2628	; 0x2628 <__divmodsi4>
    146e:	da 01       	movw	r26, r20
    1470:	c9 01       	movw	r24, r18
    1472:	40 97       	sbiw	r24, 0x10	; 16
    1474:	a1 09       	sbc	r26, r1
    1476:	b1 09       	sbc	r27, r1
    1478:	22 e0       	ldi	r18, 0x02	; 2
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	40 e0       	ldi	r20, 0x00	; 0
    147e:	50 e0       	ldi	r21, 0x00	; 0
    1480:	bc 01       	movw	r22, r24
    1482:	cd 01       	movw	r24, r26
    1484:	0e 94 14 13 	call	0x2628	; 0x2628 <__divmodsi4>
    1488:	da 01       	movw	r26, r20
    148a:	c9 01       	movw	r24, r18
    148c:	9a 83       	std	Y+2, r25	; 0x02
    148e:	89 83       	std	Y+1, r24	; 0x01
    TWBR = TWBR_value;
    1490:	e0 e2       	ldi	r30, 0x20	; 32
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	80 83       	st	Z, r24
	TWSR = 0x00;
    1498:	e1 e2       	ldi	r30, 0x21	; 33
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	10 82       	st	Z, r1

    /* Two Wire Bus address my address if any master device want to call me:  (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = config_ptr->address; // my address  :)
    149e:	a2 e2       	ldi	r26, 0x22	; 34
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	eb 81       	ldd	r30, Y+3	; 0x03
    14a4:	fc 81       	ldd	r31, Y+4	; 0x04
    14a6:	80 81       	ld	r24, Z
    14a8:	8c 93       	st	X, r24

    TWCR = (1<<TWEN); /* enable TWI */
    14aa:	e6 e5       	ldi	r30, 0x56	; 86
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	84 e0       	ldi	r24, 0x04	; 4
    14b0:	80 83       	st	Z, r24
}
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	08 95       	ret

000014c0 <TWI_start>:

void TWI_start(void)
{
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    14c8:	e6 e5       	ldi	r30, 0x56	; 86
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	84 ea       	ldi	r24, 0xA4	; 164
    14ce:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    14d0:	e6 e5       	ldi	r30, 0x56	; 86
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	88 23       	and	r24, r24
    14d8:	dc f7       	brge	.-10     	; 0x14d0 <TWI_start+0x10>
}
    14da:	cf 91       	pop	r28
    14dc:	df 91       	pop	r29
    14de:	08 95       	ret

000014e0 <TWI_stop>:

void TWI_stop(void)
{
    14e0:	df 93       	push	r29
    14e2:	cf 93       	push	r28
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    14e8:	e6 e5       	ldi	r30, 0x56	; 86
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	84 e9       	ldi	r24, 0x94	; 148
    14ee:	80 83       	st	Z, r24
}
    14f0:	cf 91       	pop	r28
    14f2:	df 91       	pop	r29
    14f4:	08 95       	ret

000014f6 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    14f6:	df 93       	push	r29
    14f8:	cf 93       	push	r28
    14fa:	0f 92       	push	r0
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1502:	e3 e2       	ldi	r30, 0x23	; 35
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    150a:	e6 e5       	ldi	r30, 0x56	; 86
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	84 e8       	ldi	r24, 0x84	; 132
    1510:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1512:	e6 e5       	ldi	r30, 0x56	; 86
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	88 23       	and	r24, r24
    151a:	dc f7       	brge	.-10     	; 0x1512 <TWI_writeByte+0x1c>
}
    151c:	0f 90       	pop	r0
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    152c:	e6 e5       	ldi	r30, 0x56	; 86
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	84 ec       	ldi	r24, 0xC4	; 196
    1532:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1534:	e6 e5       	ldi	r30, 0x56	; 86
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	88 23       	and	r24, r24
    153c:	dc f7       	brge	.-10     	; 0x1534 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    153e:	e3 e2       	ldi	r30, 0x23	; 35
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
}
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	08 95       	ret

0000154a <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    154a:	df 93       	push	r29
    154c:	cf 93       	push	r28
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1552:	e6 e5       	ldi	r30, 0x56	; 86
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	84 e8       	ldi	r24, 0x84	; 132
    1558:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    155a:	e6 e5       	ldi	r30, 0x56	; 86
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	88 23       	and	r24, r24
    1562:	dc f7       	brge	.-10     	; 0x155a <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1564:	e3 e2       	ldi	r30, 0x23	; 35
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
}
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	08 95       	ret

00001570 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	0f 92       	push	r0
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    157a:	e1 e2       	ldi	r30, 0x21	; 33
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	88 7f       	andi	r24, 0xF8	; 248
    1582:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1584:	89 81       	ldd	r24, Y+1	; 0x01
}
    1586:	0f 90       	pop	r0
    1588:	cf 91       	pop	r28
    158a:	df 91       	pop	r29
    158c:	08 95       	ret

0000158e <main>:
#include "uart.h"
#include "dcmotor.h"
#include "seven_segment.h"


int main(void){
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
    1596:	2f 97       	sbiw	r28, 0x0f	; 15
    1598:	0f b6       	in	r0, 0x3f	; 63
    159a:	f8 94       	cli
    159c:	de bf       	out	0x3e, r29	; 62
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	cd bf       	out	0x3d, r28	; 61
	uint8 password_match=0;
    15a2:	19 82       	std	Y+1, r1	; 0x01
	SREG |= (1<<7);
    15a4:	af e5       	ldi	r26, 0x5F	; 95
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	ef e5       	ldi	r30, 0x5F	; 95
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	80 68       	ori	r24, 0x80	; 128
    15b0:	8c 93       	st	X, r24
	DCMOTOR_init();
    15b2:	0e 94 c7 05 	call	0xb8e	; 0xb8e <DCMOTOR_init>
	SevenSegment_init();
    15b6:	0e 94 2d 0b 	call	0x165a	; 0x165a <SevenSegment_init>
			StopBit_1,
			DataFrame_8Bits,
			BaudRate_9600,
			RX_InterruptDisable,
			TX_InterruptDisable
	};
    15ba:	ce 01       	movw	r24, r28
    15bc:	02 96       	adiw	r24, 0x02	; 2
    15be:	9c 87       	std	Y+12, r25	; 0x0c
    15c0:	8b 87       	std	Y+11, r24	; 0x0b
    15c2:	e8 e6       	ldi	r30, 0x68	; 104
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	fe 87       	std	Y+14, r31	; 0x0e
    15c8:	ed 87       	std	Y+13, r30	; 0x0d
    15ca:	f9 e0       	ldi	r31, 0x09	; 9
    15cc:	ff 87       	std	Y+15, r31	; 0x0f
    15ce:	ed 85       	ldd	r30, Y+13	; 0x0d
    15d0:	fe 85       	ldd	r31, Y+14	; 0x0e
    15d2:	00 80       	ld	r0, Z
    15d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15d8:	01 96       	adiw	r24, 0x01	; 1
    15da:	9e 87       	std	Y+14, r25	; 0x0e
    15dc:	8d 87       	std	Y+13, r24	; 0x0d
    15de:	eb 85       	ldd	r30, Y+11	; 0x0b
    15e0:	fc 85       	ldd	r31, Y+12	; 0x0c
    15e2:	00 82       	st	Z, r0
    15e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    15e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    15e8:	01 96       	adiw	r24, 0x01	; 1
    15ea:	9c 87       	std	Y+12, r25	; 0x0c
    15ec:	8b 87       	std	Y+11, r24	; 0x0b
    15ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    15f0:	91 50       	subi	r25, 0x01	; 1
    15f2:	9f 87       	std	Y+15, r25	; 0x0f
    15f4:	ef 85       	ldd	r30, Y+15	; 0x0f
    15f6:	ee 23       	and	r30, r30
    15f8:	51 f7       	brne	.-44     	; 0x15ce <main+0x40>
	UART_Init(&UART_Config_Struct);
    15fa:	ce 01       	movw	r24, r28
    15fc:	02 96       	adiw	r24, 0x02	; 2
    15fe:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <UART_Init>
	while( UART_receiveByte()!=MC2_READY);
    1602:	0e 94 45 12 	call	0x248a	; 0x248a <UART_receiveByte>
    1606:	8f 3f       	cpi	r24, 0xFF	; 255
    1608:	e1 f7       	brne	.-8      	; 0x1602 <main+0x74>
    160a:	07 c0       	rjmp	.+14     	; 0x161a <main+0x8c>

	while(password_match==0)
	{
	recievePasswordFromUser();
    160c:	0e 94 85 0c 	call	0x190a	; 0x190a <recievePasswordFromUser>
	recieveConfirmPasswordFromUser();
    1610:	0e 94 ac 0c 	call	0x1958	; 0x1958 <recieveConfirmPasswordFromUser>
	password_match=checkPasswordMatch();
    1614:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <checkPasswordMatch>
    1618:	89 83       	std	Y+1, r24	; 0x01
			TX_InterruptDisable
	};
	UART_Init(&UART_Config_Struct);
	while( UART_receiveByte()!=MC2_READY);

	while(password_match==0)
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	88 23       	and	r24, r24
    161e:	b1 f3       	breq	.-20     	; 0x160c <main+0x7e>
	password_match=checkPasswordMatch();
	}

	while(1)
	{
		second_menu_response();
    1620:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <second_menu_response>
    1624:	fd cf       	rjmp	.-6      	; 0x1620 <main+0x92>

00001626 <PWM_Timer0_Start>:
/*******************************************************************************
*                                                                              *
*                              FUNCTIONS Definitions                           *
*                                                                              *
********************************************************************************/
void PWM_Timer0_Start(uint8 duty_cycle){
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	0f 92       	push	r0
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	89 83       	std	Y+1, r24	; 0x01
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS01);
    1632:	e3 e5       	ldi	r30, 0x53	; 83
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	8a e6       	ldi	r24, 0x6A	; 106
    1638:	80 83       	st	Z, r24

	/*set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.*/
	GPIO_setupPinDirection( COMPARE_VALUE_PORT_ID, COMPARE_VALUE_PIN_ID , PIN_OUTPUT);
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	62 e0       	ldi	r22, 0x02	; 2
    163e:	41 e0       	ldi	r20, 0x01	; 1
    1640:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <GPIO_setupPinDirection>
	TCNT0 = 0; // Set Timer Initial Value to 0
    1644:	e2 e5       	ldi	r30, 0x52	; 82
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	10 82       	st	Z, r1
	/* calculations for the compare value
	 * eg: if 50 send then 50% of the duty cycle is set as compare value
	 */
	OCR0 = duty_cycle;
    164a:	ec e5       	ldi	r30, 0x5C	; 92
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	80 83       	st	Z, r24

}
    1652:	0f 90       	pop	r0
    1654:	cf 91       	pop	r28
    1656:	df 91       	pop	r29
    1658:	08 95       	ret

0000165a <SevenSegment_init>:
*                                                                              *
*                              FUNCTIONS Definitions                           *
*                                                                              *
********************************************************************************/
void SevenSegment_init(void)
{
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(SEVEN_SEGMENT_PORT_ID,FIRST_PIN,PIN_OUTPUT);
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	64 e0       	ldi	r22, 0x04	; 4
    1666:	41 e0       	ldi	r20, 0x01	; 1
    1668:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(SEVEN_SEGMENT_PORT_ID,FIRST_PIN+1,PIN_OUTPUT);
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	65 e0       	ldi	r22, 0x05	; 5
    1670:	41 e0       	ldi	r20, 0x01	; 1
    1672:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(SEVEN_SEGMENT_PORT_ID,FIRST_PIN+2,PIN_OUTPUT);
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	66 e0       	ldi	r22, 0x06	; 6
    167a:	41 e0       	ldi	r20, 0x01	; 1
    167c:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(SEVEN_SEGMENT_PORT_ID,FIRST_PIN+3,PIN_OUTPUT);
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	67 e0       	ldi	r22, 0x07	; 7
    1684:	41 e0       	ldi	r20, 0x01	; 1
    1686:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <GPIO_setupPinDirection>
}
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	08 95       	ret

00001690 <SevenSegment_number>:

void SevenSegment_number(uint8 number)
{
    1690:	df 93       	push	r29
    1692:	cf 93       	push	r28
    1694:	00 d0       	rcall	.+0      	; 0x1696 <SevenSegment_number+0x6>
    1696:	0f 92       	push	r0
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
    169c:	89 83       	std	Y+1, r24	; 0x01
	switch(number)
    169e:	89 81       	ldd	r24, Y+1	; 0x01
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	3b 83       	std	Y+3, r19	; 0x03
    16a6:	2a 83       	std	Y+2, r18	; 0x02
    16a8:	8a 81       	ldd	r24, Y+2	; 0x02
    16aa:	9b 81       	ldd	r25, Y+3	; 0x03
    16ac:	84 30       	cpi	r24, 0x04	; 4
    16ae:	91 05       	cpc	r25, r1
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <SevenSegment_number+0x24>
    16b2:	9b c0       	rjmp	.+310    	; 0x17ea <SevenSegment_number+0x15a>
    16b4:	2a 81       	ldd	r18, Y+2	; 0x02
    16b6:	3b 81       	ldd	r19, Y+3	; 0x03
    16b8:	25 30       	cpi	r18, 0x05	; 5
    16ba:	31 05       	cpc	r19, r1
    16bc:	ec f4       	brge	.+58     	; 0x16f8 <SevenSegment_number+0x68>
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	9b 81       	ldd	r25, Y+3	; 0x03
    16c2:	81 30       	cpi	r24, 0x01	; 1
    16c4:	91 05       	cpc	r25, r1
    16c6:	09 f4       	brne	.+2      	; 0x16ca <SevenSegment_number+0x3a>
    16c8:	51 c0       	rjmp	.+162    	; 0x176c <SevenSegment_number+0xdc>
    16ca:	2a 81       	ldd	r18, Y+2	; 0x02
    16cc:	3b 81       	ldd	r19, Y+3	; 0x03
    16ce:	22 30       	cpi	r18, 0x02	; 2
    16d0:	31 05       	cpc	r19, r1
    16d2:	2c f4       	brge	.+10     	; 0x16de <SevenSegment_number+0x4e>
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	9b 81       	ldd	r25, Y+3	; 0x03
    16d8:	00 97       	sbiw	r24, 0x00	; 0
    16da:	99 f1       	breq	.+102    	; 0x1742 <SevenSegment_number+0xb2>
    16dc:	03 c1       	rjmp	.+518    	; 0x18e4 <SevenSegment_number+0x254>
    16de:	2a 81       	ldd	r18, Y+2	; 0x02
    16e0:	3b 81       	ldd	r19, Y+3	; 0x03
    16e2:	22 30       	cpi	r18, 0x02	; 2
    16e4:	31 05       	cpc	r19, r1
    16e6:	09 f4       	brne	.+2      	; 0x16ea <SevenSegment_number+0x5a>
    16e8:	56 c0       	rjmp	.+172    	; 0x1796 <SevenSegment_number+0x106>
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
    16ec:	9b 81       	ldd	r25, Y+3	; 0x03
    16ee:	83 30       	cpi	r24, 0x03	; 3
    16f0:	91 05       	cpc	r25, r1
    16f2:	09 f4       	brne	.+2      	; 0x16f6 <SevenSegment_number+0x66>
    16f4:	65 c0       	rjmp	.+202    	; 0x17c0 <SevenSegment_number+0x130>
    16f6:	f6 c0       	rjmp	.+492    	; 0x18e4 <SevenSegment_number+0x254>
    16f8:	2a 81       	ldd	r18, Y+2	; 0x02
    16fa:	3b 81       	ldd	r19, Y+3	; 0x03
    16fc:	27 30       	cpi	r18, 0x07	; 7
    16fe:	31 05       	cpc	r19, r1
    1700:	09 f4       	brne	.+2      	; 0x1704 <SevenSegment_number+0x74>
    1702:	b2 c0       	rjmp	.+356    	; 0x1868 <SevenSegment_number+0x1d8>
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	9b 81       	ldd	r25, Y+3	; 0x03
    1708:	88 30       	cpi	r24, 0x08	; 8
    170a:	91 05       	cpc	r25, r1
    170c:	6c f4       	brge	.+26     	; 0x1728 <SevenSegment_number+0x98>
    170e:	2a 81       	ldd	r18, Y+2	; 0x02
    1710:	3b 81       	ldd	r19, Y+3	; 0x03
    1712:	25 30       	cpi	r18, 0x05	; 5
    1714:	31 05       	cpc	r19, r1
    1716:	09 f4       	brne	.+2      	; 0x171a <SevenSegment_number+0x8a>
    1718:	7d c0       	rjmp	.+250    	; 0x1814 <SevenSegment_number+0x184>
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	9b 81       	ldd	r25, Y+3	; 0x03
    171e:	86 30       	cpi	r24, 0x06	; 6
    1720:	91 05       	cpc	r25, r1
    1722:	09 f4       	brne	.+2      	; 0x1726 <SevenSegment_number+0x96>
    1724:	8c c0       	rjmp	.+280    	; 0x183e <SevenSegment_number+0x1ae>
    1726:	de c0       	rjmp	.+444    	; 0x18e4 <SevenSegment_number+0x254>
    1728:	2a 81       	ldd	r18, Y+2	; 0x02
    172a:	3b 81       	ldd	r19, Y+3	; 0x03
    172c:	28 30       	cpi	r18, 0x08	; 8
    172e:	31 05       	cpc	r19, r1
    1730:	09 f4       	brne	.+2      	; 0x1734 <SevenSegment_number+0xa4>
    1732:	af c0       	rjmp	.+350    	; 0x1892 <SevenSegment_number+0x202>
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	9b 81       	ldd	r25, Y+3	; 0x03
    1738:	89 30       	cpi	r24, 0x09	; 9
    173a:	91 05       	cpc	r25, r1
    173c:	09 f4       	brne	.+2      	; 0x1740 <SevenSegment_number+0xb0>
    173e:	be c0       	rjmp	.+380    	; 0x18bc <SevenSegment_number+0x22c>
    1740:	d1 c0       	rjmp	.+418    	; 0x18e4 <SevenSegment_number+0x254>
	{
	case 0 :
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN,LOGIC_LOW);
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	64 e0       	ldi	r22, 0x04	; 4
    1746:	40 e0       	ldi	r20, 0x00	; 0
    1748:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN+1,LOGIC_LOW);
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	65 e0       	ldi	r22, 0x05	; 5
    1750:	40 e0       	ldi	r20, 0x00	; 0
    1752:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN+2,LOGIC_LOW);
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	66 e0       	ldi	r22, 0x06	; 6
    175a:	40 e0       	ldi	r20, 0x00	; 0
    175c:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN+3,LOGIC_LOW);
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	67 e0       	ldi	r22, 0x07	; 7
    1764:	40 e0       	ldi	r20, 0x00	; 0
    1766:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
    176a:	bc c0       	rjmp	.+376    	; 0x18e4 <SevenSegment_number+0x254>
		break;
	case 1 :
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN,LOGIC_HIGH);
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	64 e0       	ldi	r22, 0x04	; 4
    1770:	41 e0       	ldi	r20, 0x01	; 1
    1772:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN+1,LOGIC_LOW);
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	65 e0       	ldi	r22, 0x05	; 5
    177a:	40 e0       	ldi	r20, 0x00	; 0
    177c:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN+2,LOGIC_LOW);
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	66 e0       	ldi	r22, 0x06	; 6
    1784:	40 e0       	ldi	r20, 0x00	; 0
    1786:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN+3,LOGIC_LOW);
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	67 e0       	ldi	r22, 0x07	; 7
    178e:	40 e0       	ldi	r20, 0x00	; 0
    1790:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
    1794:	a7 c0       	rjmp	.+334    	; 0x18e4 <SevenSegment_number+0x254>
		break;

	case 2 :
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN,LOGIC_LOW);
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	64 e0       	ldi	r22, 0x04	; 4
    179a:	40 e0       	ldi	r20, 0x00	; 0
    179c:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN+1,LOGIC_HIGH);
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	65 e0       	ldi	r22, 0x05	; 5
    17a4:	41 e0       	ldi	r20, 0x01	; 1
    17a6:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN+2,LOGIC_LOW);
    17aa:	80 e0       	ldi	r24, 0x00	; 0
    17ac:	66 e0       	ldi	r22, 0x06	; 6
    17ae:	40 e0       	ldi	r20, 0x00	; 0
    17b0:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN+3,LOGIC_LOW);
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	67 e0       	ldi	r22, 0x07	; 7
    17b8:	40 e0       	ldi	r20, 0x00	; 0
    17ba:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
    17be:	92 c0       	rjmp	.+292    	; 0x18e4 <SevenSegment_number+0x254>
		break;

	case 3 :
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN,LOGIC_HIGH);
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	64 e0       	ldi	r22, 0x04	; 4
    17c4:	41 e0       	ldi	r20, 0x01	; 1
    17c6:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN+1,LOGIC_HIGH);
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	65 e0       	ldi	r22, 0x05	; 5
    17ce:	41 e0       	ldi	r20, 0x01	; 1
    17d0:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN+2,LOGIC_LOW);
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	66 e0       	ldi	r22, 0x06	; 6
    17d8:	40 e0       	ldi	r20, 0x00	; 0
    17da:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN+3,LOGIC_LOW);
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	67 e0       	ldi	r22, 0x07	; 7
    17e2:	40 e0       	ldi	r20, 0x00	; 0
    17e4:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
    17e8:	7d c0       	rjmp	.+250    	; 0x18e4 <SevenSegment_number+0x254>
		break;

	case 4 :
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN,LOGIC_LOW);
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	64 e0       	ldi	r22, 0x04	; 4
    17ee:	40 e0       	ldi	r20, 0x00	; 0
    17f0:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN+1,LOGIC_LOW);
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	65 e0       	ldi	r22, 0x05	; 5
    17f8:	40 e0       	ldi	r20, 0x00	; 0
    17fa:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN+2,LOGIC_HIGH);
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	66 e0       	ldi	r22, 0x06	; 6
    1802:	41 e0       	ldi	r20, 0x01	; 1
    1804:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN+3,LOGIC_LOW);
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	67 e0       	ldi	r22, 0x07	; 7
    180c:	40 e0       	ldi	r20, 0x00	; 0
    180e:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
    1812:	68 c0       	rjmp	.+208    	; 0x18e4 <SevenSegment_number+0x254>
		break;

	case 5 :
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN,LOGIC_HIGH);
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	64 e0       	ldi	r22, 0x04	; 4
    1818:	41 e0       	ldi	r20, 0x01	; 1
    181a:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN+1,LOGIC_LOW);
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	65 e0       	ldi	r22, 0x05	; 5
    1822:	40 e0       	ldi	r20, 0x00	; 0
    1824:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN+2,LOGIC_HIGH);
    1828:	80 e0       	ldi	r24, 0x00	; 0
    182a:	66 e0       	ldi	r22, 0x06	; 6
    182c:	41 e0       	ldi	r20, 0x01	; 1
    182e:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN+3,LOGIC_LOW);
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	67 e0       	ldi	r22, 0x07	; 7
    1836:	40 e0       	ldi	r20, 0x00	; 0
    1838:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
    183c:	53 c0       	rjmp	.+166    	; 0x18e4 <SevenSegment_number+0x254>
		break;

	case 6 :
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN,LOGIC_LOW);
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	64 e0       	ldi	r22, 0x04	; 4
    1842:	40 e0       	ldi	r20, 0x00	; 0
    1844:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN+1,LOGIC_HIGH);
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	65 e0       	ldi	r22, 0x05	; 5
    184c:	41 e0       	ldi	r20, 0x01	; 1
    184e:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN+2,LOGIC_HIGH);
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	66 e0       	ldi	r22, 0x06	; 6
    1856:	41 e0       	ldi	r20, 0x01	; 1
    1858:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN+3,LOGIC_LOW);
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	67 e0       	ldi	r22, 0x07	; 7
    1860:	40 e0       	ldi	r20, 0x00	; 0
    1862:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
    1866:	3e c0       	rjmp	.+124    	; 0x18e4 <SevenSegment_number+0x254>
		break;
	case 7 :
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN,LOGIC_HIGH);
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	64 e0       	ldi	r22, 0x04	; 4
    186c:	41 e0       	ldi	r20, 0x01	; 1
    186e:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN+1,LOGIC_HIGH);
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	65 e0       	ldi	r22, 0x05	; 5
    1876:	41 e0       	ldi	r20, 0x01	; 1
    1878:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN+2,LOGIC_HIGH);
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	66 e0       	ldi	r22, 0x06	; 6
    1880:	41 e0       	ldi	r20, 0x01	; 1
    1882:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN+3,LOGIC_LOW);
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	67 e0       	ldi	r22, 0x07	; 7
    188a:	40 e0       	ldi	r20, 0x00	; 0
    188c:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
    1890:	29 c0       	rjmp	.+82     	; 0x18e4 <SevenSegment_number+0x254>
		break;

	case 8 :
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN,LOGIC_LOW);
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	64 e0       	ldi	r22, 0x04	; 4
    1896:	40 e0       	ldi	r20, 0x00	; 0
    1898:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN+1,LOGIC_LOW);
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	65 e0       	ldi	r22, 0x05	; 5
    18a0:	40 e0       	ldi	r20, 0x00	; 0
    18a2:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN+2,LOGIC_LOW);
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	66 e0       	ldi	r22, 0x06	; 6
    18aa:	40 e0       	ldi	r20, 0x00	; 0
    18ac:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN+3,LOGIC_HIGH);
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	67 e0       	ldi	r22, 0x07	; 7
    18b4:	41 e0       	ldi	r20, 0x01	; 1
    18b6:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
    18ba:	14 c0       	rjmp	.+40     	; 0x18e4 <SevenSegment_number+0x254>
		break;
	case 9 :
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN,LOGIC_HIGH);
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	64 e0       	ldi	r22, 0x04	; 4
    18c0:	41 e0       	ldi	r20, 0x01	; 1
    18c2:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN+1,LOGIC_LOW);
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	65 e0       	ldi	r22, 0x05	; 5
    18ca:	40 e0       	ldi	r20, 0x00	; 0
    18cc:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN+2,LOGIC_LOW);
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	66 e0       	ldi	r22, 0x06	; 6
    18d4:	40 e0       	ldi	r20, 0x00	; 0
    18d6:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		GPIO_writePin(SEVEN_SEGMENT_PORT_ID,FIRST_PIN+3,LOGIC_HIGH);
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	67 e0       	ldi	r22, 0x07	; 7
    18de:	41 e0       	ldi	r20, 0x01	; 1
    18e0:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
		break;

	}
}
    18e4:	0f 90       	pop	r0
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	cf 91       	pop	r28
    18ec:	df 91       	pop	r29
    18ee:	08 95       	ret

000018f0 <first_menu_response>:
 *                                                                              *
 *                              FUNCTIONS Definitions                           *
 *                                                                              *
 ********************************************************************************/
void first_menu_response(void)
{
    18f0:	df 93       	push	r29
    18f2:	cf 93       	push	r28
    18f4:	cd b7       	in	r28, 0x3d	; 61
    18f6:	de b7       	in	r29, 0x3e	; 62
	recievePasswordFromUser();
    18f8:	0e 94 85 0c 	call	0x190a	; 0x190a <recievePasswordFromUser>
	recieveConfirmPasswordFromUser();
    18fc:	0e 94 ac 0c 	call	0x1958	; 0x1958 <recieveConfirmPasswordFromUser>
	checkPasswordMatch();
    1900:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <checkPasswordMatch>
}
    1904:	cf 91       	pop	r28
    1906:	df 91       	pop	r29
    1908:	08 95       	ret

0000190a <recievePasswordFromUser>:



void recievePasswordFromUser(void){
    190a:	0f 93       	push	r16
    190c:	1f 93       	push	r17
    190e:	df 93       	push	r29
    1910:	cf 93       	push	r28
    1912:	0f 92       	push	r0
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
	/* counter for password Digits */
	uint8 i=0;
    1918:	19 82       	std	Y+1, r1	; 0x01

	/* MC2 won't start receiving password until MC1 sends this starting bit  */
	while(UART_receiveByte()!=MC1_WILL_SEND_PASSWORD);
    191a:	0e 94 45 12 	call	0x248a	; 0x248a <UART_receiveByte>
    191e:	8a 3a       	cpi	r24, 0xAA	; 170
    1920:	e1 f7       	brne	.-8      	; 0x191a <recievePasswordFromUser+0x10>

	/* for loop to receive the password bit by bit and store it in a global array */
	for(i=0;i<PASSWORD_DIGITS_NUMBER;i++){
    1922:	19 82       	std	Y+1, r1	; 0x01
    1924:	0c c0       	rjmp	.+24     	; 0x193e <recievePasswordFromUser+0x34>
		password[i]=UART_receiveByte();
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	08 2f       	mov	r16, r24
    192a:	10 e0       	ldi	r17, 0x00	; 0
    192c:	0e 94 45 12 	call	0x248a	; 0x248a <UART_receiveByte>
    1930:	f8 01       	movw	r30, r16
    1932:	e0 58       	subi	r30, 0x80	; 128
    1934:	ff 4f       	sbci	r31, 0xFF	; 255
    1936:	80 83       	st	Z, r24

	/* MC2 won't start receiving password until MC1 sends this starting bit  */
	while(UART_receiveByte()!=MC1_WILL_SEND_PASSWORD);

	/* for loop to receive the password bit by bit and store it in a global array */
	for(i=0;i<PASSWORD_DIGITS_NUMBER;i++){
    1938:	89 81       	ldd	r24, Y+1	; 0x01
    193a:	8f 5f       	subi	r24, 0xFF	; 255
    193c:	89 83       	std	Y+1, r24	; 0x01
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	85 30       	cpi	r24, 0x05	; 5
    1942:	88 f3       	brcs	.-30     	; 0x1926 <recievePasswordFromUser+0x1c>
		password[i]=UART_receiveByte();
	}

	while(UART_receiveByte()!='=');
    1944:	0e 94 45 12 	call	0x248a	; 0x248a <UART_receiveByte>
    1948:	8d 33       	cpi	r24, 0x3D	; 61
    194a:	e1 f7       	brne	.-8      	; 0x1944 <recievePasswordFromUser+0x3a>

}
    194c:	0f 90       	pop	r0
    194e:	cf 91       	pop	r28
    1950:	df 91       	pop	r29
    1952:	1f 91       	pop	r17
    1954:	0f 91       	pop	r16
    1956:	08 95       	ret

00001958 <recieveConfirmPasswordFromUser>:

void recieveConfirmPasswordFromUser(void){
    1958:	0f 93       	push	r16
    195a:	1f 93       	push	r17
    195c:	df 93       	push	r29
    195e:	cf 93       	push	r28
    1960:	0f 92       	push	r0
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
	/* counter for confirm password Digits */
	uint8 i=0;
    1966:	19 82       	std	Y+1, r1	; 0x01
	/* MC2 won't start receiving confirm password until MC1 sends this starting bit  */
	while(UART_receiveByte()!=MC1_WILL_SEND_CONFIRM_PASSWORD);
    1968:	0e 94 45 12 	call	0x248a	; 0x248a <UART_receiveByte>
    196c:	8b 3b       	cpi	r24, 0xBB	; 187
    196e:	e1 f7       	brne	.-8      	; 0x1968 <recieveConfirmPasswordFromUser+0x10>

	for(i=0;i<PASSWORD_DIGITS_NUMBER;i++){
    1970:	19 82       	std	Y+1, r1	; 0x01
    1972:	0c c0       	rjmp	.+24     	; 0x198c <recieveConfirmPasswordFromUser+0x34>
		confirm_password[i]=UART_receiveByte();
    1974:	89 81       	ldd	r24, Y+1	; 0x01
    1976:	08 2f       	mov	r16, r24
    1978:	10 e0       	ldi	r17, 0x00	; 0
    197a:	0e 94 45 12 	call	0x248a	; 0x248a <UART_receiveByte>
    197e:	f8 01       	movw	r30, r16
    1980:	eb 57       	subi	r30, 0x7B	; 123
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	80 83       	st	Z, r24
	/* counter for confirm password Digits */
	uint8 i=0;
	/* MC2 won't start receiving confirm password until MC1 sends this starting bit  */
	while(UART_receiveByte()!=MC1_WILL_SEND_CONFIRM_PASSWORD);

	for(i=0;i<PASSWORD_DIGITS_NUMBER;i++){
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	8f 5f       	subi	r24, 0xFF	; 255
    198a:	89 83       	std	Y+1, r24	; 0x01
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	85 30       	cpi	r24, 0x05	; 5
    1990:	88 f3       	brcs	.-30     	; 0x1974 <recieveConfirmPasswordFromUser+0x1c>
		confirm_password[i]=UART_receiveByte();
	}

	while(UART_receiveByte()!='=');
    1992:	0e 94 45 12 	call	0x248a	; 0x248a <UART_receiveByte>
    1996:	8d 33       	cpi	r24, 0x3D	; 61
    1998:	e1 f7       	brne	.-8      	; 0x1992 <recieveConfirmPasswordFromUser+0x3a>

}
    199a:	0f 90       	pop	r0
    199c:	cf 91       	pop	r28
    199e:	df 91       	pop	r29
    19a0:	1f 91       	pop	r17
    19a2:	0f 91       	pop	r16
    19a4:	08 95       	ret

000019a6 <checkPasswordMatch>:


uint8 checkPasswordMatch(void){
    19a6:	df 93       	push	r29
    19a8:	cf 93       	push	r28
    19aa:	00 d0       	rcall	.+0      	; 0x19ac <checkPasswordMatch+0x6>
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
	uint8 i=0;
    19b0:	1a 82       	std	Y+2, r1	; 0x02
	uint8 flag=1;
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	89 83       	std	Y+1, r24	; 0x01

	for(i=0;i<PASSWORD_DIGITS_NUMBER;i++)
    19b6:	1a 82       	std	Y+2, r1	; 0x02
    19b8:	15 c0       	rjmp	.+42     	; 0x19e4 <checkPasswordMatch+0x3e>
	{
		//g_password[i]=arr1[i]; /* store password while the first password entry is the same of the second password entry */
		if(password[i]!=confirm_password[i])
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	88 2f       	mov	r24, r24
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	fc 01       	movw	r30, r24
    19c2:	e0 58       	subi	r30, 0x80	; 128
    19c4:	ff 4f       	sbci	r31, 0xFF	; 255
    19c6:	20 81       	ld	r18, Z
    19c8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ca:	88 2f       	mov	r24, r24
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	fc 01       	movw	r30, r24
    19d0:	eb 57       	subi	r30, 0x7B	; 123
    19d2:	ff 4f       	sbci	r31, 0xFF	; 255
    19d4:	80 81       	ld	r24, Z
    19d6:	28 17       	cp	r18, r24
    19d8:	11 f0       	breq	.+4      	; 0x19de <checkPasswordMatch+0x38>
		{

			flag=0;
    19da:	19 82       	std	Y+1, r1	; 0x01
    19dc:	06 c0       	rjmp	.+12     	; 0x19ea <checkPasswordMatch+0x44>

uint8 checkPasswordMatch(void){
	uint8 i=0;
	uint8 flag=1;

	for(i=0;i<PASSWORD_DIGITS_NUMBER;i++)
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	8f 5f       	subi	r24, 0xFF	; 255
    19e2:	8a 83       	std	Y+2, r24	; 0x02
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	85 30       	cpi	r24, 0x05	; 5
    19e8:	40 f3       	brcs	.-48     	; 0x19ba <checkPasswordMatch+0x14>
			break;

		}

	}
	UART_sendByte(MC2_WILL_SEND_CHECK);
    19ea:	8c ec       	ldi	r24, 0xCC	; 204
    19ec:	0e 94 2e 12 	call	0x245c	; 0x245c <UART_sendByte>

	UART_sendByte(flag);
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	0e 94 2e 12 	call	0x245c	; 0x245c <UART_sendByte>

	if(flag==1)
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
    19f8:	81 30       	cpi	r24, 0x01	; 1
    19fa:	11 f4       	brne	.+4      	; 0x1a00 <checkPasswordMatch+0x5a>
	{

		storeInEEPROM();
    19fc:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <storeInEEPROM>

	}
	return flag;
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	cf 91       	pop	r28
    1a08:	df 91       	pop	r29
    1a0a:	08 95       	ret

00001a0c <storeInEEPROM>:


void storeInEEPROM(void)
{
    1a0c:	df 93       	push	r29
    1a0e:	cf 93       	push	r28
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	2f 97       	sbiw	r28, 0x0f	; 15
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	f8 94       	cli
    1a1a:	de bf       	out	0x3e, r29	; 62
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	/* Write pass in EEPROM*/
	for(i=0 ;i<PASSWORD_DIGITS_NUMBER ;i++)
    1a20:	1f 86       	std	Y+15, r1	; 0x0f
    1a22:	86 c0       	rjmp	.+268    	; 0x1b30 <storeInEEPROM+0x124>
	{
		EEPROM_writeByte(((0x0311)+i) ,password[i]);
    1a24:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a26:	88 2f       	mov	r24, r24
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	8f 5e       	subi	r24, 0xEF	; 239
    1a2c:	9c 4f       	sbci	r25, 0xFC	; 252
    1a2e:	ac 01       	movw	r20, r24
    1a30:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a32:	88 2f       	mov	r24, r24
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	fc 01       	movw	r30, r24
    1a38:	e0 58       	subi	r30, 0x80	; 128
    1a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3c:	20 81       	ld	r18, Z
    1a3e:	ca 01       	movw	r24, r20
    1a40:	62 2f       	mov	r22, r18
    1a42:	0e 94 41 06 	call	0xc82	; 0xc82 <EEPROM_writeByte>
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	a8 e4       	ldi	r26, 0x48	; 72
    1a4c:	b2 e4       	ldi	r27, 0x42	; 66
    1a4e:	8b 87       	std	Y+11, r24	; 0x0b
    1a50:	9c 87       	std	Y+12, r25	; 0x0c
    1a52:	ad 87       	std	Y+13, r26	; 0x0d
    1a54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	4a ef       	ldi	r20, 0xFA	; 250
    1a64:	54 e4       	ldi	r21, 0x44	; 68
    1a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	8f 83       	std	Y+7, r24	; 0x07
    1a70:	98 87       	std	Y+8, r25	; 0x08
    1a72:	a9 87       	std	Y+9, r26	; 0x09
    1a74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a76:	6f 81       	ldd	r22, Y+7	; 0x07
    1a78:	78 85       	ldd	r23, Y+8	; 0x08
    1a7a:	89 85       	ldd	r24, Y+9	; 0x09
    1a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	40 e8       	ldi	r20, 0x80	; 128
    1a84:	5f e3       	ldi	r21, 0x3F	; 63
    1a86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a8a:	88 23       	and	r24, r24
    1a8c:	2c f4       	brge	.+10     	; 0x1a98 <storeInEEPROM+0x8c>
		__ticks = 1;
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	9e 83       	std	Y+6, r25	; 0x06
    1a94:	8d 83       	std	Y+5, r24	; 0x05
    1a96:	3f c0       	rjmp	.+126    	; 0x1b16 <storeInEEPROM+0x10a>
	else if (__tmp > 65535)
    1a98:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9a:	78 85       	ldd	r23, Y+8	; 0x08
    1a9c:	89 85       	ldd	r24, Y+9	; 0x09
    1a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	3f ef       	ldi	r19, 0xFF	; 255
    1aa4:	4f e7       	ldi	r20, 0x7F	; 127
    1aa6:	57 e4       	ldi	r21, 0x47	; 71
    1aa8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aac:	18 16       	cp	r1, r24
    1aae:	4c f5       	brge	.+82     	; 0x1b02 <storeInEEPROM+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	40 e2       	ldi	r20, 0x20	; 32
    1abe:	51 e4       	ldi	r21, 0x41	; 65
    1ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	bc 01       	movw	r22, r24
    1aca:	cd 01       	movw	r24, r26
    1acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	9e 83       	std	Y+6, r25	; 0x06
    1ad6:	8d 83       	std	Y+5, r24	; 0x05
    1ad8:	0f c0       	rjmp	.+30     	; 0x1af8 <storeInEEPROM+0xec>
    1ada:	88 ec       	ldi	r24, 0xC8	; 200
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	9c 83       	std	Y+4, r25	; 0x04
    1ae0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	f1 f7       	brne	.-4      	; 0x1ae6 <storeInEEPROM+0xda>
    1aea:	9c 83       	std	Y+4, r25	; 0x04
    1aec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aee:	8d 81       	ldd	r24, Y+5	; 0x05
    1af0:	9e 81       	ldd	r25, Y+6	; 0x06
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	9e 83       	std	Y+6, r25	; 0x06
    1af6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af8:	8d 81       	ldd	r24, Y+5	; 0x05
    1afa:	9e 81       	ldd	r25, Y+6	; 0x06
    1afc:	00 97       	sbiw	r24, 0x00	; 0
    1afe:	69 f7       	brne	.-38     	; 0x1ada <storeInEEPROM+0xce>
    1b00:	14 c0       	rjmp	.+40     	; 0x1b2a <storeInEEPROM+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b02:	6f 81       	ldd	r22, Y+7	; 0x07
    1b04:	78 85       	ldd	r23, Y+8	; 0x08
    1b06:	89 85       	ldd	r24, Y+9	; 0x09
    1b08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	9e 83       	std	Y+6, r25	; 0x06
    1b14:	8d 83       	std	Y+5, r24	; 0x05
    1b16:	8d 81       	ldd	r24, Y+5	; 0x05
    1b18:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1a:	9a 83       	std	Y+2, r25	; 0x02
    1b1c:	89 83       	std	Y+1, r24	; 0x01
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	9a 81       	ldd	r25, Y+2	; 0x02
    1b22:	01 97       	sbiw	r24, 0x01	; 1
    1b24:	f1 f7       	brne	.-4      	; 0x1b22 <storeInEEPROM+0x116>
    1b26:	9a 83       	std	Y+2, r25	; 0x02
    1b28:	89 83       	std	Y+1, r24	; 0x01

void storeInEEPROM(void)
{
	uint8 i;
	/* Write pass in EEPROM*/
	for(i=0 ;i<PASSWORD_DIGITS_NUMBER ;i++)
    1b2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b2c:	8f 5f       	subi	r24, 0xFF	; 255
    1b2e:	8f 87       	std	Y+15, r24	; 0x0f
    1b30:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b32:	85 30       	cpi	r24, 0x05	; 5
    1b34:	08 f4       	brcc	.+2      	; 0x1b38 <storeInEEPROM+0x12c>
    1b36:	76 cf       	rjmp	.-276    	; 0x1a24 <storeInEEPROM+0x18>
	{
		EEPROM_writeByte(((0x0311)+i) ,password[i]);
		_delay_ms(50);
	}

}
    1b38:	2f 96       	adiw	r28, 0x0f	; 15
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	f8 94       	cli
    1b3e:	de bf       	out	0x3e, r29	; 62
    1b40:	0f be       	out	0x3f, r0	; 63
    1b42:	cd bf       	out	0x3d, r28	; 61
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	08 95       	ret

00001b4a <checkPasswordInEEPROM>:

uint8 checkPasswordInEEPROM(void)
{
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	00 d0       	rcall	.+0      	; 0x1b50 <checkPasswordInEEPROM+0x6>
    1b50:	0f 92       	push	r0
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
	uint8 i,read_data;
	uint8 flag = 1 ;
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	89 83       	std	Y+1, r24	; 0x01
	/* read password stored in EEPROM*/
	for(i=0 ;i<PASSWORD_DIGITS_NUMBER ;i++)
    1b5a:	1a 82       	std	Y+2, r1	; 0x02
    1b5c:	1a c0       	rjmp	.+52     	; 0x1b92 <checkPasswordInEEPROM+0x48>
	{
		EEPROM_readByte(((0x0311)+i) ,&read_data);
    1b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b60:	88 2f       	mov	r24, r24
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	8f 5e       	subi	r24, 0xEF	; 239
    1b66:	9c 4f       	sbci	r25, 0xFC	; 252
    1b68:	9e 01       	movw	r18, r28
    1b6a:	2d 5f       	subi	r18, 0xFD	; 253
    1b6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b6e:	b9 01       	movw	r22, r18
    1b70:	0e 94 82 06 	call	0xd04	; 0xd04 <EEPROM_readByte>
		if(read_data!=password[i]){
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	88 2f       	mov	r24, r24
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	fc 01       	movw	r30, r24
    1b7c:	e0 58       	subi	r30, 0x80	; 128
    1b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b80:	90 81       	ld	r25, Z
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	98 17       	cp	r25, r24
    1b86:	11 f0       	breq	.+4      	; 0x1b8c <checkPasswordInEEPROM+0x42>
			flag=0;
    1b88:	19 82       	std	Y+1, r1	; 0x01
    1b8a:	06 c0       	rjmp	.+12     	; 0x1b98 <checkPasswordInEEPROM+0x4e>
uint8 checkPasswordInEEPROM(void)
{
	uint8 i,read_data;
	uint8 flag = 1 ;
	/* read password stored in EEPROM*/
	for(i=0 ;i<PASSWORD_DIGITS_NUMBER ;i++)
    1b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8e:	8f 5f       	subi	r24, 0xFF	; 255
    1b90:	8a 83       	std	Y+2, r24	; 0x02
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	85 30       	cpi	r24, 0x05	; 5
    1b96:	18 f3       	brcs	.-58     	; 0x1b5e <checkPasswordInEEPROM+0x14>
			break;
		}

	}

	return flag;
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b9a:	0f 90       	pop	r0
    1b9c:	0f 90       	pop	r0
    1b9e:	0f 90       	pop	r0
    1ba0:	cf 91       	pop	r28
    1ba2:	df 91       	pop	r29
    1ba4:	08 95       	ret

00001ba6 <motorOperation>:


void motorOperation(void)
{
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
	DCMOTOR_rotate(CLOCK_WISE,100);
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	64 e6       	ldi	r22, 0x64	; 100
    1bb2:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <DCMOTOR_rotate>
	delayInSeconds(15);
    1bb6:	8f e0       	ldi	r24, 0x0F	; 15
    1bb8:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <delayInSeconds>
	DCMOTOR_rotate(STOP,0);
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	60 e0       	ldi	r22, 0x00	; 0
    1bc0:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <DCMOTOR_rotate>
	delayInSeconds(3);
    1bc4:	83 e0       	ldi	r24, 0x03	; 3
    1bc6:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <delayInSeconds>
	DCMOTOR_rotate(ANTI_CLOCK_WISE,100);
    1bca:	82 e0       	ldi	r24, 0x02	; 2
    1bcc:	64 e6       	ldi	r22, 0x64	; 100
    1bce:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <DCMOTOR_rotate>
	delayInSeconds(12);
    1bd2:	8c e0       	ldi	r24, 0x0C	; 12
    1bd4:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <delayInSeconds>
	DCMOTOR_rotate(STOP,0);
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	60 e0       	ldi	r22, 0x00	; 0
    1bdc:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <DCMOTOR_rotate>


}
    1be0:	cf 91       	pop	r28
    1be2:	df 91       	pop	r29
    1be4:	08 95       	ret

00001be6 <second_menu_response>:
 *              5-if password doesn't match with EEPROM password for 3 times
 *              BUZZER will be active for 1 minute
 *              6-if password match with EEPROM password then open the door or change password as user chose
 *
 */
void second_menu_response(void){
    1be6:	df 93       	push	r29
    1be8:	cf 93       	push	r28
    1bea:	00 d0       	rcall	.+0      	; 0x1bec <second_menu_response+0x6>
    1bec:	00 d0       	rcall	.+0      	; 0x1bee <second_menu_response+0x8>
    1bee:	cd b7       	in	r28, 0x3d	; 61
    1bf0:	de b7       	in	r29, 0x3e	; 62
	/* variable to hold user choice */
	uint8 user_choice=0;
    1bf2:	1a 82       	std	Y+2, r1	; 0x02
	uint8 match_password_in_eeprom=2;
    1bf4:	82 e0       	ldi	r24, 0x02	; 2
    1bf6:	89 83       	std	Y+1, r24	; 0x01
	static uint8 missmatch_counter=0;

	recievePasswordFromUser();
    1bf8:	0e 94 85 0c 	call	0x190a	; 0x190a <recievePasswordFromUser>
	match_password_in_eeprom=checkPasswordInEEPROM();
    1bfc:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <checkPasswordInEEPROM>
    1c00:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(match_password_in_eeprom);
    1c02:	89 81       	ldd	r24, Y+1	; 0x01
    1c04:	0e 94 2e 12 	call	0x245c	; 0x245c <UART_sendByte>

	while(UART_receiveByte()!=MC1_WILL_SEND_USER_CHOICE);
    1c08:	0e 94 45 12 	call	0x248a	; 0x248a <UART_receiveByte>
    1c0c:	8d 3d       	cpi	r24, 0xDD	; 221
    1c0e:	e1 f7       	brne	.-8      	; 0x1c08 <second_menu_response+0x22>
	/* receive the choice from MC1 */
	user_choice=UART_receiveByte();
    1c10:	0e 94 45 12 	call	0x248a	; 0x248a <UART_receiveByte>
    1c14:	8a 83       	std	Y+2, r24	; 0x02
    1c16:	22 c0       	rjmp	.+68     	; 0x1c5c <second_menu_response+0x76>


	while(match_password_in_eeprom==0)
	{
		missmatch_counter++;
    1c18:	80 91 7a 00 	lds	r24, 0x007A
    1c1c:	8f 5f       	subi	r24, 0xFF	; 255
    1c1e:	80 93 7a 00 	sts	0x007A, r24

		if(missmatch_counter == PASSWORD_MISMATCH_MAXIMUM)
    1c22:	80 91 7a 00 	lds	r24, 0x007A
    1c26:	83 30       	cpi	r24, 0x03	; 3
    1c28:	69 f4       	brne	.+26     	; 0x1c44 <second_menu_response+0x5e>
		{
			SevenSegment_number(missmatch_counter);
    1c2a:	80 91 7a 00 	lds	r24, 0x007A
    1c2e:	0e 94 48 0b 	call	0x1690	; 0x1690 <SevenSegment_number>
			BUZZER_active();
    1c32:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <BUZZER_active>
			missmatch_counter = 0;
    1c36:	10 92 7a 00 	sts	0x007A, r1
			SevenSegment_number(missmatch_counter);
    1c3a:	80 91 7a 00 	lds	r24, 0x007A
    1c3e:	0e 94 48 0b 	call	0x1690	; 0x1690 <SevenSegment_number>
    1c42:	0f c0       	rjmp	.+30     	; 0x1c62 <second_menu_response+0x7c>
			break;
		}
		SevenSegment_number(missmatch_counter);
    1c44:	80 91 7a 00 	lds	r24, 0x007A
    1c48:	0e 94 48 0b 	call	0x1690	; 0x1690 <SevenSegment_number>
		recievePasswordFromUser();
    1c4c:	0e 94 85 0c 	call	0x190a	; 0x190a <recievePasswordFromUser>
		match_password_in_eeprom=checkPasswordInEEPROM();
    1c50:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <checkPasswordInEEPROM>
    1c54:	89 83       	std	Y+1, r24	; 0x01
		UART_sendByte(match_password_in_eeprom);
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	0e 94 2e 12 	call	0x245c	; 0x245c <UART_sendByte>
	while(UART_receiveByte()!=MC1_WILL_SEND_USER_CHOICE);
	/* receive the choice from MC1 */
	user_choice=UART_receiveByte();


	while(match_password_in_eeprom==0)
    1c5c:	89 81       	ldd	r24, Y+1	; 0x01
    1c5e:	88 23       	and	r24, r24
    1c60:	d9 f2       	breq	.-74     	; 0x1c18 <second_menu_response+0x32>
		recievePasswordFromUser();
		match_password_in_eeprom=checkPasswordInEEPROM();
		UART_sendByte(match_password_in_eeprom);
	}

	if(match_password_in_eeprom==1)
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
    1c64:	81 30       	cpi	r24, 0x01	; 1
    1c66:	d9 f4       	brne	.+54     	; 0x1c9e <second_menu_response+0xb8>
	{
		missmatch_counter=0;
    1c68:	10 92 7a 00 	sts	0x007A, r1
		SevenSegment_number(missmatch_counter);
    1c6c:	80 91 7a 00 	lds	r24, 0x007A
    1c70:	0e 94 48 0b 	call	0x1690	; 0x1690 <SevenSegment_number>

		switch(user_choice)
    1c74:	8a 81       	ldd	r24, Y+2	; 0x02
    1c76:	28 2f       	mov	r18, r24
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	3c 83       	std	Y+4, r19	; 0x04
    1c7c:	2b 83       	std	Y+3, r18	; 0x03
    1c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c80:	9c 81       	ldd	r25, Y+4	; 0x04
    1c82:	8b 32       	cpi	r24, 0x2B	; 43
    1c84:	91 05       	cpc	r25, r1
    1c86:	31 f0       	breq	.+12     	; 0x1c94 <second_menu_response+0xae>
    1c88:	2b 81       	ldd	r18, Y+3	; 0x03
    1c8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c8c:	2d 32       	cpi	r18, 0x2D	; 45
    1c8e:	31 05       	cpc	r19, r1
    1c90:	21 f0       	breq	.+8      	; 0x1c9a <second_menu_response+0xb4>
    1c92:	05 c0       	rjmp	.+10     	; 0x1c9e <second_menu_response+0xb8>
		{
		case '+' :motorOperation();
    1c94:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <motorOperation>
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <second_menu_response+0xb8>
		break;
		case '-' :first_menu_response();;
    1c9a:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <first_menu_response>
		break;
		default: break;
		}
	}
}
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	cf 91       	pop	r28
    1ca8:	df 91       	pop	r29
    1caa:	08 95       	ret

00001cac <tickIncrement>:



void tickIncrement(void)
{
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1cb4:	80 91 78 00 	lds	r24, 0x0078
    1cb8:	90 91 79 00 	lds	r25, 0x0079
    1cbc:	01 96       	adiw	r24, 0x01	; 1
    1cbe:	90 93 79 00 	sts	0x0079, r25
    1cc2:	80 93 78 00 	sts	0x0078, r24
}
    1cc6:	cf 91       	pop	r28
    1cc8:	df 91       	pop	r29
    1cca:	08 95       	ret

00001ccc <delayInSeconds>:

void delayInSeconds(uint8 number_seconds)
{
    1ccc:	df 93       	push	r29
    1cce:	cf 93       	push	r28
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
    1cd4:	2c 97       	sbiw	r28, 0x0c	; 12
    1cd6:	0f b6       	in	r0, 0x3f	; 63
    1cd8:	f8 94       	cli
    1cda:	de bf       	out	0x3e, r29	; 62
    1cdc:	0f be       	out	0x3f, r0	; 63
    1cde:	cd bf       	out	0x3d, r28	; 61
    1ce0:	8f 83       	std	Y+7, r24	; 0x07
	/* essential to start count from zero for every use */
	g_tick=0;
    1ce2:	10 92 79 00 	sts	0x0079, r1
    1ce6:	10 92 78 00 	sts	0x0078, r1

	/* initialize Timer 1 configuration structure */
	Timer1_ConfigType timer1={0,1563,F_CPU_1024,CTC};
    1cea:	ce 01       	movw	r24, r28
    1cec:	01 96       	adiw	r24, 0x01	; 1
    1cee:	99 87       	std	Y+9, r25	; 0x09
    1cf0:	88 87       	std	Y+8, r24	; 0x08
    1cf2:	e1 e7       	ldi	r30, 0x71	; 113
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	fb 87       	std	Y+11, r31	; 0x0b
    1cf8:	ea 87       	std	Y+10, r30	; 0x0a
    1cfa:	f6 e0       	ldi	r31, 0x06	; 6
    1cfc:	fc 87       	std	Y+12, r31	; 0x0c
    1cfe:	ea 85       	ldd	r30, Y+10	; 0x0a
    1d00:	fb 85       	ldd	r31, Y+11	; 0x0b
    1d02:	00 80       	ld	r0, Z
    1d04:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d06:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d08:	01 96       	adiw	r24, 0x01	; 1
    1d0a:	9b 87       	std	Y+11, r25	; 0x0b
    1d0c:	8a 87       	std	Y+10, r24	; 0x0a
    1d0e:	e8 85       	ldd	r30, Y+8	; 0x08
    1d10:	f9 85       	ldd	r31, Y+9	; 0x09
    1d12:	00 82       	st	Z, r0
    1d14:	88 85       	ldd	r24, Y+8	; 0x08
    1d16:	99 85       	ldd	r25, Y+9	; 0x09
    1d18:	01 96       	adiw	r24, 0x01	; 1
    1d1a:	99 87       	std	Y+9, r25	; 0x09
    1d1c:	88 87       	std	Y+8, r24	; 0x08
    1d1e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d20:	91 50       	subi	r25, 0x01	; 1
    1d22:	9c 87       	std	Y+12, r25	; 0x0c
    1d24:	ec 85       	ldd	r30, Y+12	; 0x0c
    1d26:	ee 23       	and	r30, r30
    1d28:	51 f7       	brne	.-44     	; 0x1cfe <delayInSeconds+0x32>
	Timer1_init(&timer1);
    1d2a:	ce 01       	movw	r24, r28
    1d2c:	01 96       	adiw	r24, 0x01	; 1
    1d2e:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <Timer1_init>

	/* call back (tickIncrement) to increase tick counter */
	Timer1_setCallBack(tickIncrement);
    1d32:	86 e5       	ldi	r24, 0x56	; 86
    1d34:	9e e0       	ldi	r25, 0x0E	; 14
    1d36:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <Timer1_setCallBack>

	/* polling method */
	while(g_tick<5*number_seconds);
    1d3a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d3c:	28 2f       	mov	r18, r24
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	c9 01       	movw	r24, r18
    1d42:	88 0f       	add	r24, r24
    1d44:	99 1f       	adc	r25, r25
    1d46:	88 0f       	add	r24, r24
    1d48:	99 1f       	adc	r25, r25
    1d4a:	82 0f       	add	r24, r18
    1d4c:	93 1f       	adc	r25, r19
    1d4e:	9c 01       	movw	r18, r24
    1d50:	80 91 78 00 	lds	r24, 0x0078
    1d54:	90 91 79 00 	lds	r25, 0x0079
    1d58:	82 17       	cp	r24, r18
    1d5a:	93 07       	cpc	r25, r19
    1d5c:	70 f3       	brcs	.-36     	; 0x1d3a <delayInSeconds+0x6e>

	/* close Timer 1 */
	Timer1_deInit();
    1d5e:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <Timer1_deInit>

}
    1d62:	2c 96       	adiw	r28, 0x0c	; 12
    1d64:	0f b6       	in	r0, 0x3f	; 63
    1d66:	f8 94       	cli
    1d68:	de bf       	out	0x3e, r29	; 62
    1d6a:	0f be       	out	0x3f, r0	; 63
    1d6c:	cd bf       	out	0x3d, r28	; 61
    1d6e:	cf 91       	pop	r28
    1d70:	df 91       	pop	r29
    1d72:	08 95       	ret

00001d74 <BUZZER_active>:

/* function to active BUZZER for a period of time */
void BUZZER_active(void)
{
    1d74:	df 93       	push	r29
    1d76:	cf 93       	push	r28
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
	/* initialize buzzer driver */
	BUZZER_init();
    1d7c:	0e 94 a3 05 	call	0xb46	; 0xb46 <BUZZER_init>
	/* buzzer on for 1 minute */
	BUZZER_ON();
    1d80:	0e 94 af 05 	call	0xb5e	; 0xb5e <BUZZER_ON>
	delayInSeconds(60);
    1d84:	8c e3       	ldi	r24, 0x3C	; 60
    1d86:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <delayInSeconds>
	BUZZER_OFF();
    1d8a:	0e 94 bb 05 	call	0xb76	; 0xb76 <BUZZER_OFF>
}
    1d8e:	cf 91       	pop	r28
    1d90:	df 91       	pop	r29
    1d92:	08 95       	ret

00001d94 <__vector_7>:
#include<avr/interrupt.h>
#include <avr/io.h>

static volatile void (*g_callBackPtr)(void) = NULL_PTR;

ISR(TIMER1_COMPA_vect) {
    1d94:	1f 92       	push	r1
    1d96:	0f 92       	push	r0
    1d98:	0f b6       	in	r0, 0x3f	; 63
    1d9a:	0f 92       	push	r0
    1d9c:	11 24       	eor	r1, r1
    1d9e:	2f 93       	push	r18
    1da0:	3f 93       	push	r19
    1da2:	4f 93       	push	r20
    1da4:	5f 93       	push	r21
    1da6:	6f 93       	push	r22
    1da8:	7f 93       	push	r23
    1daa:	8f 93       	push	r24
    1dac:	9f 93       	push	r25
    1dae:	af 93       	push	r26
    1db0:	bf 93       	push	r27
    1db2:	ef 93       	push	r30
    1db4:	ff 93       	push	r31
    1db6:	df 93       	push	r29
    1db8:	cf 93       	push	r28
    1dba:	cd b7       	in	r28, 0x3d	; 61
    1dbc:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR) {
    1dbe:	80 91 7b 00 	lds	r24, 0x007B
    1dc2:	90 91 7c 00 	lds	r25, 0x007C
    1dc6:	00 97       	sbiw	r24, 0x00	; 0
    1dc8:	29 f0       	breq	.+10     	; 0x1dd4 <__vector_7+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1dca:	e0 91 7b 00 	lds	r30, 0x007B
    1dce:	f0 91 7c 00 	lds	r31, 0x007C
    1dd2:	09 95       	icall
	}
}
    1dd4:	cf 91       	pop	r28
    1dd6:	df 91       	pop	r29
    1dd8:	ff 91       	pop	r31
    1dda:	ef 91       	pop	r30
    1ddc:	bf 91       	pop	r27
    1dde:	af 91       	pop	r26
    1de0:	9f 91       	pop	r25
    1de2:	8f 91       	pop	r24
    1de4:	7f 91       	pop	r23
    1de6:	6f 91       	pop	r22
    1de8:	5f 91       	pop	r21
    1dea:	4f 91       	pop	r20
    1dec:	3f 91       	pop	r19
    1dee:	2f 91       	pop	r18
    1df0:	0f 90       	pop	r0
    1df2:	0f be       	out	0x3f, r0	; 63
    1df4:	0f 90       	pop	r0
    1df6:	1f 90       	pop	r1
    1df8:	18 95       	reti

00001dfa <__vector_9>:
ISR(TIMER1_OVF_vect) {
    1dfa:	1f 92       	push	r1
    1dfc:	0f 92       	push	r0
    1dfe:	0f b6       	in	r0, 0x3f	; 63
    1e00:	0f 92       	push	r0
    1e02:	11 24       	eor	r1, r1
    1e04:	2f 93       	push	r18
    1e06:	3f 93       	push	r19
    1e08:	4f 93       	push	r20
    1e0a:	5f 93       	push	r21
    1e0c:	6f 93       	push	r22
    1e0e:	7f 93       	push	r23
    1e10:	8f 93       	push	r24
    1e12:	9f 93       	push	r25
    1e14:	af 93       	push	r26
    1e16:	bf 93       	push	r27
    1e18:	ef 93       	push	r30
    1e1a:	ff 93       	push	r31
    1e1c:	df 93       	push	r29
    1e1e:	cf 93       	push	r28
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR) {
    1e24:	80 91 7b 00 	lds	r24, 0x007B
    1e28:	90 91 7c 00 	lds	r25, 0x007C
    1e2c:	00 97       	sbiw	r24, 0x00	; 0
    1e2e:	29 f0       	breq	.+10     	; 0x1e3a <__vector_9+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1e30:	e0 91 7b 00 	lds	r30, 0x007B
    1e34:	f0 91 7c 00 	lds	r31, 0x007C
    1e38:	09 95       	icall
	}
}
    1e3a:	cf 91       	pop	r28
    1e3c:	df 91       	pop	r29
    1e3e:	ff 91       	pop	r31
    1e40:	ef 91       	pop	r30
    1e42:	bf 91       	pop	r27
    1e44:	af 91       	pop	r26
    1e46:	9f 91       	pop	r25
    1e48:	8f 91       	pop	r24
    1e4a:	7f 91       	pop	r23
    1e4c:	6f 91       	pop	r22
    1e4e:	5f 91       	pop	r21
    1e50:	4f 91       	pop	r20
    1e52:	3f 91       	pop	r19
    1e54:	2f 91       	pop	r18
    1e56:	0f 90       	pop	r0
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	0f 90       	pop	r0
    1e5c:	1f 90       	pop	r1
    1e5e:	18 95       	reti

00001e60 <Timer1_init>:

void Timer1_init(const Timer1_ConfigType *Config_Ptr) {
    1e60:	df 93       	push	r29
    1e62:	cf 93       	push	r28
    1e64:	00 d0       	rcall	.+0      	; 0x1e66 <Timer1_init+0x6>
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
    1e6a:	9a 83       	std	Y+2, r25	; 0x02
    1e6c:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Config_Ptr->initial_value; //timer initial value
    1e6e:	ac e4       	ldi	r26, 0x4C	; 76
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	e9 81       	ldd	r30, Y+1	; 0x01
    1e74:	fa 81       	ldd	r31, Y+2	; 0x02
    1e76:	80 81       	ld	r24, Z
    1e78:	91 81       	ldd	r25, Z+1	; 0x01
    1e7a:	11 96       	adiw	r26, 0x01	; 1
    1e7c:	9c 93       	st	X, r25
    1e7e:	8e 93       	st	-X, r24
	OCR1A = Config_Ptr->compare_value; //compare value
    1e80:	aa e4       	ldi	r26, 0x4A	; 74
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	e9 81       	ldd	r30, Y+1	; 0x01
    1e86:	fa 81       	ldd	r31, Y+2	; 0x02
    1e88:	82 81       	ldd	r24, Z+2	; 0x02
    1e8a:	93 81       	ldd	r25, Z+3	; 0x03
    1e8c:	11 96       	adiw	r26, 0x01	; 1
    1e8e:	9c 93       	st	X, r25
    1e90:	8e 93       	st	-X, r24
	TIMSK |= (1 << OCIE1A); //enable compare interrupt for channel A
    1e92:	a9 e5       	ldi	r26, 0x59	; 89
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	e9 e5       	ldi	r30, 0x59	; 89
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 81       	ld	r24, Z
    1e9c:	80 61       	ori	r24, 0x10	; 16
    1e9e:	8c 93       	st	X, r24
	/* Configure timer1 control registers
	 * 1. Non PWM mode FOC1A=1 and FOC1B=1
	 * 2. No need for OC1A & OC1B in this example so COM1A0=0 & COM1A1=0 & COM1B0=0 & COM1B1=0
	 * 3. CTC Mode and compare value in OCR1A WGM10=0 & WGM11=0 & WGM12=1 & WGM13=0
	 */
	TCCR1A = (1 << FOC1A);
    1ea0:	ef e4       	ldi	r30, 0x4F	; 79
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	88 e0       	ldi	r24, 0x08	; 8
    1ea6:	80 83       	st	Z, r24
	/*
	 * 4. Clock = F_CPU/1024 CS10=1 CS11=0 CS12=1
	 */
	TCCR1B = Config_Ptr->mode | Config_Ptr->prescaler;
    1ea8:	ae e4       	ldi	r26, 0x4E	; 78
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	e9 81       	ldd	r30, Y+1	; 0x01
    1eae:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb0:	95 81       	ldd	r25, Z+5	; 0x05
    1eb2:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb4:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb6:	84 81       	ldd	r24, Z+4	; 0x04
    1eb8:	89 2b       	or	r24, r25
    1eba:	8c 93       	st	X, r24

}
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	cf 91       	pop	r28
    1ec2:	df 91       	pop	r29
    1ec4:	08 95       	ret

00001ec6 <Timer1_deInit>:
void Timer1_deInit(void) {
    1ec6:	df 93       	push	r29
    1ec8:	cf 93       	push	r28
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    1ece:	ec e4       	ldi	r30, 0x4C	; 76
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	11 82       	std	Z+1, r1	; 0x01
    1ed4:	10 82       	st	Z, r1
	OCR1A = 0;
    1ed6:	ea e4       	ldi	r30, 0x4A	; 74
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	11 82       	std	Z+1, r1	; 0x01
    1edc:	10 82       	st	Z, r1
	TIMSK = 0;
    1ede:	e9 e5       	ldi	r30, 0x59	; 89
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	10 82       	st	Z, r1
	TCCR1A = 0;
    1ee4:	ef e4       	ldi	r30, 0x4F	; 79
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	10 82       	st	Z, r1
	TCCR1B = 0;
    1eea:	ee e4       	ldi	r30, 0x4E	; 78
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	10 82       	st	Z, r1
}
    1ef0:	cf 91       	pop	r28
    1ef2:	df 91       	pop	r29
    1ef4:	08 95       	ret

00001ef6 <Timer1_setCallBack>:
void Timer1_setCallBack(void (*a_ptr)(void)) {
    1ef6:	df 93       	push	r29
    1ef8:	cf 93       	push	r28
    1efa:	00 d0       	rcall	.+0      	; 0x1efc <Timer1_setCallBack+0x6>
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
    1f00:	9a 83       	std	Y+2, r25	; 0x02
    1f02:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	9a 81       	ldd	r25, Y+2	; 0x02
    1f08:	90 93 7c 00 	sts	0x007C, r25
    1f0c:	80 93 7b 00 	sts	0x007B, r24
}
    1f10:	0f 90       	pop	r0
    1f12:	0f 90       	pop	r0
    1f14:	cf 91       	pop	r28
    1f16:	df 91       	pop	r29
    1f18:	08 95       	ret

00001f1a <__vector_13>:
 *                                                                              *
 *                          Interrupt Service Routine                           *
 *                                                                              *
 ********************************************************************************/
ISR(USART_RXC_vect)
 {
    1f1a:	1f 92       	push	r1
    1f1c:	0f 92       	push	r0
    1f1e:	0f b6       	in	r0, 0x3f	; 63
    1f20:	0f 92       	push	r0
    1f22:	11 24       	eor	r1, r1
    1f24:	df 93       	push	r29
    1f26:	cf 93       	push	r28
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62

 }
    1f2c:	cf 91       	pop	r28
    1f2e:	df 91       	pop	r29
    1f30:	0f 90       	pop	r0
    1f32:	0f be       	out	0x3f, r0	; 63
    1f34:	0f 90       	pop	r0
    1f36:	1f 90       	pop	r1
    1f38:	18 95       	reti

00001f3a <__vector_15>:

ISR(USART_TXC_vect)
 {
    1f3a:	1f 92       	push	r1
    1f3c:	0f 92       	push	r0
    1f3e:	0f b6       	in	r0, 0x3f	; 63
    1f40:	0f 92       	push	r0
    1f42:	11 24       	eor	r1, r1
    1f44:	df 93       	push	r29
    1f46:	cf 93       	push	r28
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62

 }
    1f4c:	cf 91       	pop	r28
    1f4e:	df 91       	pop	r29
    1f50:	0f 90       	pop	r0
    1f52:	0f be       	out	0x3f, r0	; 63
    1f54:	0f 90       	pop	r0
    1f56:	1f 90       	pop	r1
    1f58:	18 95       	reti

00001f5a <UART_Init>:
*                                                                              *
*                              FUNCTIONS Definitions                           *
*                                                                              *
********************************************************************************/
void UART_Init(const UART_ConfigType * Config_Ptr)
{
    1f5a:	df 93       	push	r29
    1f5c:	cf 93       	push	r28
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
    1f62:	64 97       	sbiw	r28, 0x14	; 20
    1f64:	0f b6       	in	r0, 0x3f	; 63
    1f66:	f8 94       	cli
    1f68:	de bf       	out	0x3e, r29	; 62
    1f6a:	0f be       	out	0x3f, r0	; 63
    1f6c:	cd bf       	out	0x3d, r28	; 61
    1f6e:	9a 83       	std	Y+2, r25	; 0x02
    1f70:	89 83       	std	Y+1, r24	; 0x01
	/*Configuration Operation Mode*/
    switch( Config_Ptr ->operation_mode)
    1f72:	e9 81       	ldd	r30, Y+1	; 0x01
    1f74:	fa 81       	ldd	r31, Y+2	; 0x02
    1f76:	80 81       	ld	r24, Z
    1f78:	28 2f       	mov	r18, r24
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	3c 8b       	std	Y+20, r19	; 0x14
    1f7e:	2b 8b       	std	Y+19, r18	; 0x13
    1f80:	4b 89       	ldd	r20, Y+19	; 0x13
    1f82:	5c 89       	ldd	r21, Y+20	; 0x14
    1f84:	41 30       	cpi	r20, 0x01	; 1
    1f86:	51 05       	cpc	r21, r1
    1f88:	91 f0       	breq	.+36     	; 0x1fae <UART_Init+0x54>
    1f8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f8e:	82 30       	cpi	r24, 0x02	; 2
    1f90:	91 05       	cpc	r25, r1
    1f92:	a9 f0       	breq	.+42     	; 0x1fbe <UART_Init+0x64>
    1f94:	2b 89       	ldd	r18, Y+19	; 0x13
    1f96:	3c 89       	ldd	r19, Y+20	; 0x14
    1f98:	21 15       	cp	r18, r1
    1f9a:	31 05       	cpc	r19, r1
    1f9c:	f1 f4       	brne	.+60     	; 0x1fda <UART_Init+0x80>
    {
      case Receiver:                SET_BIT(UCSRB,RXEN);
    1f9e:	aa e2       	ldi	r26, 0x2A	; 42
    1fa0:	b0 e0       	ldi	r27, 0x00	; 0
    1fa2:	ea e2       	ldi	r30, 0x2A	; 42
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	80 61       	ori	r24, 0x10	; 16
    1faa:	8c 93       	st	X, r24
    1fac:	16 c0       	rjmp	.+44     	; 0x1fda <UART_Init+0x80>
    	                            break;
      case Transmitter:             SET_BIT(UCSRB,TXEN);
    1fae:	aa e2       	ldi	r26, 0x2A	; 42
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	ea e2       	ldi	r30, 0x2A	; 42
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 81       	ld	r24, Z
    1fb8:	88 60       	ori	r24, 0x08	; 8
    1fba:	8c 93       	st	X, r24
    1fbc:	0e c0       	rjmp	.+28     	; 0x1fda <UART_Init+0x80>
    	                            break;
      case Transmitter_Receiver:    SET_BIT(UCSRB,RXEN);
    1fbe:	aa e2       	ldi	r26, 0x2A	; 42
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	ea e2       	ldi	r30, 0x2A	; 42
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	80 61       	ori	r24, 0x10	; 16
    1fca:	8c 93       	st	X, r24
                                    SET_BIT(UCSRB,TXEN);
    1fcc:	aa e2       	ldi	r26, 0x2A	; 42
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	ea e2       	ldi	r30, 0x2A	; 42
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	88 60       	ori	r24, 0x08	; 8
    1fd8:	8c 93       	st	X, r24
    	                            break;
    }
	/*Configuration Transmission Speed*/
	switch( Config_Ptr ->speed)
    1fda:	e9 81       	ldd	r30, Y+1	; 0x01
    1fdc:	fa 81       	ldd	r31, Y+2	; 0x02
    1fde:	81 81       	ldd	r24, Z+1	; 0x01
    1fe0:	48 2f       	mov	r20, r24
    1fe2:	50 e0       	ldi	r21, 0x00	; 0
    1fe4:	5a 8b       	std	Y+18, r21	; 0x12
    1fe6:	49 8b       	std	Y+17, r20	; 0x11
    1fe8:	89 89       	ldd	r24, Y+17	; 0x11
    1fea:	9a 89       	ldd	r25, Y+18	; 0x12
    1fec:	00 97       	sbiw	r24, 0x00	; 0
    1fee:	31 f0       	breq	.+12     	; 0x1ffc <UART_Init+0xa2>
    1ff0:	29 89       	ldd	r18, Y+17	; 0x11
    1ff2:	3a 89       	ldd	r19, Y+18	; 0x12
    1ff4:	21 30       	cpi	r18, 0x01	; 1
    1ff6:	31 05       	cpc	r19, r1
    1ff8:	61 f0       	breq	.+24     	; 0x2012 <UART_Init+0xb8>
    1ffa:	15 c0       	rjmp	.+42     	; 0x2026 <UART_Init+0xcc>
	{
	  case Normal_Speed:   CLEAR_BIT(UCSRA,U2X);
    1ffc:	ab e2       	ldi	r26, 0x2B	; 43
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	eb e2       	ldi	r30, 0x2B	; 43
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	8d 7f       	andi	r24, 0xFD	; 253
    2008:	8c 93       	st	X, r24
	                       g_speed_mode_division_factor = 16;
    200a:	80 e1       	ldi	r24, 0x10	; 16
    200c:	80 93 7f 00 	sts	0x007F, r24
    2010:	0a c0       	rjmp	.+20     	; 0x2026 <UART_Init+0xcc>
	 	                   break;
	  case Double_Speed:   SET_BIT(UCSRA,U2X);
    2012:	ab e2       	ldi	r26, 0x2B	; 43
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	eb e2       	ldi	r30, 0x2B	; 43
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	82 60       	ori	r24, 0x02	; 2
    201e:	8c 93       	st	X, r24
                           g_speed_mode_division_factor = 8;
    2020:	88 e0       	ldi	r24, 0x08	; 8
    2022:	80 93 7f 00 	sts	0x007F, r24
	  		               break;
	}

	/*Configuration Synchronization of UART*/
	switch ( Config_Ptr->synchronization)
    2026:	e9 81       	ldd	r30, Y+1	; 0x01
    2028:	fa 81       	ldd	r31, Y+2	; 0x02
    202a:	82 81       	ldd	r24, Z+2	; 0x02
    202c:	48 2f       	mov	r20, r24
    202e:	50 e0       	ldi	r21, 0x00	; 0
    2030:	58 8b       	std	Y+16, r21	; 0x10
    2032:	4f 87       	std	Y+15, r20	; 0x0f
    2034:	8f 85       	ldd	r24, Y+15	; 0x0f
    2036:	98 89       	ldd	r25, Y+16	; 0x10
    2038:	00 97       	sbiw	r24, 0x00	; 0
    203a:	31 f0       	breq	.+12     	; 0x2048 <UART_Init+0xee>
    203c:	2f 85       	ldd	r18, Y+15	; 0x0f
    203e:	38 89       	ldd	r19, Y+16	; 0x10
    2040:	21 30       	cpi	r18, 0x01	; 1
    2042:	31 05       	cpc	r19, r1
    2044:	81 f0       	breq	.+32     	; 0x2066 <UART_Init+0x10c>
    2046:	1d c0       	rjmp	.+58     	; 0x2082 <UART_Init+0x128>
	{
	 case Asynchronous: SET_BIT(UCSRC,URSEL);
    2048:	a0 e4       	ldi	r26, 0x40	; 64
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	e0 e4       	ldi	r30, 0x40	; 64
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	80 81       	ld	r24, Z
    2052:	80 68       	ori	r24, 0x80	; 128
    2054:	8c 93       	st	X, r24
	                    CLEAR_BIT(UCSRC,UMSEL);
    2056:	a0 e4       	ldi	r26, 0x40	; 64
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	e0 e4       	ldi	r30, 0x40	; 64
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	8f 7b       	andi	r24, 0xBF	; 191
    2062:	8c 93       	st	X, r24
    2064:	0e c0       	rjmp	.+28     	; 0x2082 <UART_Init+0x128>
		                break;
	 case Synchronous:  SET_BIT(UCSRC,URSEL);
    2066:	a0 e4       	ldi	r26, 0x40	; 64
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	e0 e4       	ldi	r30, 0x40	; 64
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	80 68       	ori	r24, 0x80	; 128
    2072:	8c 93       	st	X, r24
	                    SET_BIT(UCSRC,UMSEL);
    2074:	a0 e4       	ldi	r26, 0x40	; 64
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	e0 e4       	ldi	r30, 0x40	; 64
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	80 64       	ori	r24, 0x40	; 64
    2080:	8c 93       	st	X, r24
	 		            break;
	}

	/*Configuration Parity Bit of UART*/
	switch ( Config_Ptr ->parity)
    2082:	e9 81       	ldd	r30, Y+1	; 0x01
    2084:	fa 81       	ldd	r31, Y+2	; 0x02
    2086:	83 81       	ldd	r24, Z+3	; 0x03
    2088:	48 2f       	mov	r20, r24
    208a:	50 e0       	ldi	r21, 0x00	; 0
    208c:	5e 87       	std	Y+14, r21	; 0x0e
    208e:	4d 87       	std	Y+13, r20	; 0x0d
    2090:	8d 85       	ldd	r24, Y+13	; 0x0d
    2092:	9e 85       	ldd	r25, Y+14	; 0x0e
    2094:	81 30       	cpi	r24, 0x01	; 1
    2096:	91 05       	cpc	r25, r1
    2098:	09 f1       	breq	.+66     	; 0x20dc <UART_Init+0x182>
    209a:	2d 85       	ldd	r18, Y+13	; 0x0d
    209c:	3e 85       	ldd	r19, Y+14	; 0x0e
    209e:	22 30       	cpi	r18, 0x02	; 2
    20a0:	31 05       	cpc	r19, r1
    20a2:	91 f1       	breq	.+100    	; 0x2108 <UART_Init+0x1ae>
    20a4:	4d 85       	ldd	r20, Y+13	; 0x0d
    20a6:	5e 85       	ldd	r21, Y+14	; 0x0e
    20a8:	41 15       	cp	r20, r1
    20aa:	51 05       	cpc	r21, r1
    20ac:	09 f0       	breq	.+2      	; 0x20b0 <UART_Init+0x156>
    20ae:	41 c0       	rjmp	.+130    	; 0x2132 <UART_Init+0x1d8>
	{
	  case Parity_Disabled: SET_BIT(UCSRC,URSEL);
    20b0:	a0 e4       	ldi	r26, 0x40	; 64
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	e0 e4       	ldi	r30, 0x40	; 64
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	80 68       	ori	r24, 0x80	; 128
    20bc:	8c 93       	st	X, r24
		                    CLEAR_BIT(UCSRC,UPM0);
    20be:	a0 e4       	ldi	r26, 0x40	; 64
    20c0:	b0 e0       	ldi	r27, 0x00	; 0
    20c2:	e0 e4       	ldi	r30, 0x40	; 64
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	8f 7e       	andi	r24, 0xEF	; 239
    20ca:	8c 93       	st	X, r24
	                        CLEAR_BIT(UCSRC,UPM1);
    20cc:	a0 e4       	ldi	r26, 0x40	; 64
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	e0 e4       	ldi	r30, 0x40	; 64
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	8f 7d       	andi	r24, 0xDF	; 223
    20d8:	8c 93       	st	X, r24
    20da:	2b c0       	rjmp	.+86     	; 0x2132 <UART_Init+0x1d8>
	                        break;
	  case Parity_Odd:      SET_BIT(UCSRC,URSEL);
    20dc:	a0 e4       	ldi	r26, 0x40	; 64
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	e0 e4       	ldi	r30, 0x40	; 64
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	80 68       	ori	r24, 0x80	; 128
    20e8:	8c 93       	st	X, r24
		                    SET_BIT(UCSRC,UPM0);
    20ea:	a0 e4       	ldi	r26, 0x40	; 64
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	e0 e4       	ldi	r30, 0x40	; 64
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	80 61       	ori	r24, 0x10	; 16
    20f6:	8c 93       	st	X, r24
                            SET_BIT(UCSRC,UPM1);
    20f8:	a0 e4       	ldi	r26, 0x40	; 64
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	e0 e4       	ldi	r30, 0x40	; 64
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	80 62       	ori	r24, 0x20	; 32
    2104:	8c 93       	st	X, r24
    2106:	15 c0       	rjmp	.+42     	; 0x2132 <UART_Init+0x1d8>
                            break;
	  case Parity_Even:     SET_BIT(UCSRC,URSEL);
    2108:	a0 e4       	ldi	r26, 0x40	; 64
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	e0 e4       	ldi	r30, 0x40	; 64
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	80 68       	ori	r24, 0x80	; 128
    2114:	8c 93       	st	X, r24
		                    CLEAR_BIT(UCSRC,UPM0);
    2116:	a0 e4       	ldi	r26, 0x40	; 64
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	e0 e4       	ldi	r30, 0x40	; 64
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	8f 7e       	andi	r24, 0xEF	; 239
    2122:	8c 93       	st	X, r24
                            SET_BIT(UCSRC,UPM1);
    2124:	a0 e4       	ldi	r26, 0x40	; 64
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	e0 e4       	ldi	r30, 0x40	; 64
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	80 62       	ori	r24, 0x20	; 32
    2130:	8c 93       	st	X, r24
                            break;
	}

	/*Configuration Number of Stop Bits of UART*/
    switch( Config_Ptr ->stop_bit)
    2132:	e9 81       	ldd	r30, Y+1	; 0x01
    2134:	fa 81       	ldd	r31, Y+2	; 0x02
    2136:	84 81       	ldd	r24, Z+4	; 0x04
    2138:	28 2f       	mov	r18, r24
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	3c 87       	std	Y+12, r19	; 0x0c
    213e:	2b 87       	std	Y+11, r18	; 0x0b
    2140:	4b 85       	ldd	r20, Y+11	; 0x0b
    2142:	5c 85       	ldd	r21, Y+12	; 0x0c
    2144:	41 15       	cp	r20, r1
    2146:	51 05       	cpc	r21, r1
    2148:	31 f0       	breq	.+12     	; 0x2156 <UART_Init+0x1fc>
    214a:	8b 85       	ldd	r24, Y+11	; 0x0b
    214c:	9c 85       	ldd	r25, Y+12	; 0x0c
    214e:	81 30       	cpi	r24, 0x01	; 1
    2150:	91 05       	cpc	r25, r1
    2152:	49 f0       	breq	.+18     	; 0x2166 <UART_Init+0x20c>
    2154:	0f c0       	rjmp	.+30     	; 0x2174 <UART_Init+0x21a>
    {
    case StopBit_1:  CLEAR_BIT(UCSRC,USBS);
    2156:	a0 e4       	ldi	r26, 0x40	; 64
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	e0 e4       	ldi	r30, 0x40	; 64
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	87 7f       	andi	r24, 0xF7	; 247
    2162:	8c 93       	st	X, r24
    2164:	07 c0       	rjmp	.+14     	; 0x2174 <UART_Init+0x21a>
    	             break;
    case StopBit_2:  SET_BIT(UCSRC,USBS);
    2166:	a0 e4       	ldi	r26, 0x40	; 64
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	e0 e4       	ldi	r30, 0x40	; 64
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	88 60       	ori	r24, 0x08	; 8
    2172:	8c 93       	st	X, r24
    	             break;
    }

    /*Configuration Number of Data Frame Bits*/
    switch ( Config_Ptr ->dataframe_bits )
    2174:	e9 81       	ldd	r30, Y+1	; 0x01
    2176:	fa 81       	ldd	r31, Y+2	; 0x02
    2178:	85 81       	ldd	r24, Z+5	; 0x05
    217a:	28 2f       	mov	r18, r24
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	3a 87       	std	Y+10, r19	; 0x0a
    2180:	29 87       	std	Y+9, r18	; 0x09
    2182:	49 85       	ldd	r20, Y+9	; 0x09
    2184:	5a 85       	ldd	r21, Y+10	; 0x0a
    2186:	42 30       	cpi	r20, 0x02	; 2
    2188:	51 05       	cpc	r21, r1
    218a:	09 f4       	brne	.+2      	; 0x218e <UART_Init+0x234>
    218c:	49 c0       	rjmp	.+146    	; 0x2220 <UART_Init+0x2c6>
    218e:	89 85       	ldd	r24, Y+9	; 0x09
    2190:	9a 85       	ldd	r25, Y+10	; 0x0a
    2192:	83 30       	cpi	r24, 0x03	; 3
    2194:	91 05       	cpc	r25, r1
    2196:	5c f4       	brge	.+22     	; 0x21ae <UART_Init+0x254>
    2198:	29 85       	ldd	r18, Y+9	; 0x09
    219a:	3a 85       	ldd	r19, Y+10	; 0x0a
    219c:	21 15       	cp	r18, r1
    219e:	31 05       	cpc	r19, r1
    21a0:	99 f0       	breq	.+38     	; 0x21c8 <UART_Init+0x26e>
    21a2:	49 85       	ldd	r20, Y+9	; 0x09
    21a4:	5a 85       	ldd	r21, Y+10	; 0x0a
    21a6:	41 30       	cpi	r20, 0x01	; 1
    21a8:	51 05       	cpc	r21, r1
    21aa:	21 f1       	breq	.+72     	; 0x21f4 <UART_Init+0x29a>
    21ac:	7a c0       	rjmp	.+244    	; 0x22a2 <UART_Init+0x348>
    21ae:	89 85       	ldd	r24, Y+9	; 0x09
    21b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b2:	83 30       	cpi	r24, 0x03	; 3
    21b4:	91 05       	cpc	r25, r1
    21b6:	09 f4       	brne	.+2      	; 0x21ba <UART_Init+0x260>
    21b8:	49 c0       	rjmp	.+146    	; 0x224c <UART_Init+0x2f2>
    21ba:	29 85       	ldd	r18, Y+9	; 0x09
    21bc:	3a 85       	ldd	r19, Y+10	; 0x0a
    21be:	27 30       	cpi	r18, 0x07	; 7
    21c0:	31 05       	cpc	r19, r1
    21c2:	09 f4       	brne	.+2      	; 0x21c6 <UART_Init+0x26c>
    21c4:	59 c0       	rjmp	.+178    	; 0x2278 <UART_Init+0x31e>
    21c6:	6d c0       	rjmp	.+218    	; 0x22a2 <UART_Init+0x348>
    {
    case DataFrame_5Bits:  CLEAR_BIT(UCSRC,UCSZ0);
    21c8:	a0 e4       	ldi	r26, 0x40	; 64
    21ca:	b0 e0       	ldi	r27, 0x00	; 0
    21cc:	e0 e4       	ldi	r30, 0x40	; 64
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	80 81       	ld	r24, Z
    21d2:	8d 7f       	andi	r24, 0xFD	; 253
    21d4:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRC,UCSZ1);
    21d6:	a0 e4       	ldi	r26, 0x40	; 64
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	e0 e4       	ldi	r30, 0x40	; 64
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	8b 7f       	andi	r24, 0xFB	; 251
    21e2:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRB,UCSZ2);
    21e4:	aa e2       	ldi	r26, 0x2A	; 42
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	ea e2       	ldi	r30, 0x2A	; 42
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	80 81       	ld	r24, Z
    21ee:	8b 7f       	andi	r24, 0xFB	; 251
    21f0:	8c 93       	st	X, r24
    21f2:	57 c0       	rjmp	.+174    	; 0x22a2 <UART_Init+0x348>
    	                   break;
    case DataFrame_6Bits:  SET_BIT(UCSRC,UCSZ0);
    21f4:	a0 e4       	ldi	r26, 0x40	; 64
    21f6:	b0 e0       	ldi	r27, 0x00	; 0
    21f8:	e0 e4       	ldi	r30, 0x40	; 64
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	82 60       	ori	r24, 0x02	; 2
    2200:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRC,UCSZ1);
    2202:	a0 e4       	ldi	r26, 0x40	; 64
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	e0 e4       	ldi	r30, 0x40	; 64
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	8b 7f       	andi	r24, 0xFB	; 251
    220e:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRB,UCSZ2);
    2210:	aa e2       	ldi	r26, 0x2A	; 42
    2212:	b0 e0       	ldi	r27, 0x00	; 0
    2214:	ea e2       	ldi	r30, 0x2A	; 42
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	80 81       	ld	r24, Z
    221a:	8b 7f       	andi	r24, 0xFB	; 251
    221c:	8c 93       	st	X, r24
    221e:	41 c0       	rjmp	.+130    	; 0x22a2 <UART_Init+0x348>
    	                   break;
    case DataFrame_7Bits:  CLEAR_BIT(UCSRC,UCSZ0);
    2220:	a0 e4       	ldi	r26, 0x40	; 64
    2222:	b0 e0       	ldi	r27, 0x00	; 0
    2224:	e0 e4       	ldi	r30, 0x40	; 64
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	80 81       	ld	r24, Z
    222a:	8d 7f       	andi	r24, 0xFD	; 253
    222c:	8c 93       	st	X, r24
                           SET_BIT(UCSRC,UCSZ1);
    222e:	a0 e4       	ldi	r26, 0x40	; 64
    2230:	b0 e0       	ldi	r27, 0x00	; 0
    2232:	e0 e4       	ldi	r30, 0x40	; 64
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	80 81       	ld	r24, Z
    2238:	84 60       	ori	r24, 0x04	; 4
    223a:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRB,UCSZ2);
    223c:	aa e2       	ldi	r26, 0x2A	; 42
    223e:	b0 e0       	ldi	r27, 0x00	; 0
    2240:	ea e2       	ldi	r30, 0x2A	; 42
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	80 81       	ld	r24, Z
    2246:	8b 7f       	andi	r24, 0xFB	; 251
    2248:	8c 93       	st	X, r24
    224a:	2b c0       	rjmp	.+86     	; 0x22a2 <UART_Init+0x348>
    	                   break;
    case DataFrame_8Bits:  SET_BIT(UCSRC,UCSZ0);
    224c:	a0 e4       	ldi	r26, 0x40	; 64
    224e:	b0 e0       	ldi	r27, 0x00	; 0
    2250:	e0 e4       	ldi	r30, 0x40	; 64
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	82 60       	ori	r24, 0x02	; 2
    2258:	8c 93       	st	X, r24
                           SET_BIT(UCSRC,UCSZ1);
    225a:	a0 e4       	ldi	r26, 0x40	; 64
    225c:	b0 e0       	ldi	r27, 0x00	; 0
    225e:	e0 e4       	ldi	r30, 0x40	; 64
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
    2264:	84 60       	ori	r24, 0x04	; 4
    2266:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRB,UCSZ2);
    2268:	aa e2       	ldi	r26, 0x2A	; 42
    226a:	b0 e0       	ldi	r27, 0x00	; 0
    226c:	ea e2       	ldi	r30, 0x2A	; 42
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	80 81       	ld	r24, Z
    2272:	8b 7f       	andi	r24, 0xFB	; 251
    2274:	8c 93       	st	X, r24
    2276:	15 c0       	rjmp	.+42     	; 0x22a2 <UART_Init+0x348>
    	                   break;
    case DataFrame_9Bits:  SET_BIT(UCSRC,UCSZ0);
    2278:	a0 e4       	ldi	r26, 0x40	; 64
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	e0 e4       	ldi	r30, 0x40	; 64
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	82 60       	ori	r24, 0x02	; 2
    2284:	8c 93       	st	X, r24
                           SET_BIT(UCSRC,UCSZ1);
    2286:	a0 e4       	ldi	r26, 0x40	; 64
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	e0 e4       	ldi	r30, 0x40	; 64
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	84 60       	ori	r24, 0x04	; 4
    2292:	8c 93       	st	X, r24
                           SET_BIT(UCSRB,UCSZ2);
    2294:	aa e2       	ldi	r26, 0x2A	; 42
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	ea e2       	ldi	r30, 0x2A	; 42
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	84 60       	ori	r24, 0x04	; 4
    22a0:	8c 93       	st	X, r24
    	                   break;
    }


    switch( Config_Ptr ->baud_rate)
    22a2:	e9 81       	ldd	r30, Y+1	; 0x01
    22a4:	fa 81       	ldd	r31, Y+2	; 0x02
    22a6:	86 81       	ldd	r24, Z+6	; 0x06
    22a8:	48 2f       	mov	r20, r24
    22aa:	50 e0       	ldi	r21, 0x00	; 0
    22ac:	58 87       	std	Y+8, r21	; 0x08
    22ae:	4f 83       	std	Y+7, r20	; 0x07
    22b0:	8f 81       	ldd	r24, Y+7	; 0x07
    22b2:	98 85       	ldd	r25, Y+8	; 0x08
    22b4:	81 30       	cpi	r24, 0x01	; 1
    22b6:	91 05       	cpc	r25, r1
    22b8:	f9 f0       	breq	.+62     	; 0x22f8 <UART_Init+0x39e>
    22ba:	2f 81       	ldd	r18, Y+7	; 0x07
    22bc:	38 85       	ldd	r19, Y+8	; 0x08
    22be:	22 30       	cpi	r18, 0x02	; 2
    22c0:	31 05       	cpc	r19, r1
    22c2:	34 f4       	brge	.+12     	; 0x22d0 <UART_Init+0x376>
    22c4:	4f 81       	ldd	r20, Y+7	; 0x07
    22c6:	58 85       	ldd	r21, Y+8	; 0x08
    22c8:	41 15       	cp	r20, r1
    22ca:	51 05       	cpc	r21, r1
    22cc:	69 f0       	breq	.+26     	; 0x22e8 <UART_Init+0x38e>
    22ce:	7b c0       	rjmp	.+246    	; 0x23c6 <UART_Init+0x46c>
    22d0:	8f 81       	ldd	r24, Y+7	; 0x07
    22d2:	98 85       	ldd	r25, Y+8	; 0x08
    22d4:	82 30       	cpi	r24, 0x02	; 2
    22d6:	91 05       	cpc	r25, r1
    22d8:	91 f1       	breq	.+100    	; 0x233e <UART_Init+0x3e4>
    22da:	2f 81       	ldd	r18, Y+7	; 0x07
    22dc:	38 85       	ldd	r19, Y+8	; 0x08
    22de:	23 30       	cpi	r18, 0x03	; 3
    22e0:	31 05       	cpc	r19, r1
    22e2:	09 f4       	brne	.+2      	; 0x22e6 <UART_Init+0x38c>
    22e4:	4f c0       	rjmp	.+158    	; 0x2384 <UART_Init+0x42a>
    22e6:	6f c0       	rjmp	.+222    	; 0x23c6 <UART_Init+0x46c>
    {
    case BaudRate_9600:   /*For 1 MHz  value = 12 , For 8MHz value = 103*/
    	                  UBRRH = 103>>8;
    22e8:	e0 e4       	ldi	r30, 0x40	; 64
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	10 82       	st	Z, r1
                           UBRRL = 103;
    22ee:	e9 e2       	ldi	r30, 0x29	; 41
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	87 e6       	ldi	r24, 0x67	; 103
    22f4:	80 83       	st	Z, r24
    22f6:	67 c0       	rjmp	.+206    	; 0x23c6 <UART_Init+0x46c>
    	                  break;
    	                  /*There is a bug in the equation shown blow */
    case BaudRate_14400:  g_UBRR_value= (uint16)(((F_CPU / (g_speed_mode_division_factor * 14400 )))-1);
    22f8:	80 91 7f 00 	lds	r24, 0x007F
    22fc:	28 2f       	mov	r18, r24
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	80 e4       	ldi	r24, 0x40	; 64
    2302:	98 e3       	ldi	r25, 0x38	; 56
    2304:	ac 01       	movw	r20, r24
    2306:	24 9f       	mul	r18, r20
    2308:	c0 01       	movw	r24, r0
    230a:	25 9f       	mul	r18, r21
    230c:	90 0d       	add	r25, r0
    230e:	34 9f       	mul	r19, r20
    2310:	90 0d       	add	r25, r0
    2312:	11 24       	eor	r1, r1
    2314:	9c 01       	movw	r18, r24
    2316:	44 27       	eor	r20, r20
    2318:	37 fd       	sbrc	r19, 7
    231a:	40 95       	com	r20
    231c:	54 2f       	mov	r21, r20
    231e:	80 e0       	ldi	r24, 0x00	; 0
    2320:	92 e1       	ldi	r25, 0x12	; 18
    2322:	aa e7       	ldi	r26, 0x7A	; 122
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	bc 01       	movw	r22, r24
    2328:	cd 01       	movw	r24, r26
    232a:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__udivmodsi4>
    232e:	da 01       	movw	r26, r20
    2330:	c9 01       	movw	r24, r18
    2332:	01 97       	sbiw	r24, 0x01	; 1
    2334:	90 93 7e 00 	sts	0x007E, r25
    2338:	80 93 7d 00 	sts	0x007D, r24
    233c:	44 c0       	rjmp	.+136    	; 0x23c6 <UART_Init+0x46c>
    	                  break;
    case BaudRate_19200:  g_UBRR_value= (uint16)(((F_CPU / (g_speed_mode_division_factor * 19200 )))-1);
    233e:	80 91 7f 00 	lds	r24, 0x007F
    2342:	28 2f       	mov	r18, r24
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	80 e0       	ldi	r24, 0x00	; 0
    2348:	9b e4       	ldi	r25, 0x4B	; 75
    234a:	ac 01       	movw	r20, r24
    234c:	24 9f       	mul	r18, r20
    234e:	c0 01       	movw	r24, r0
    2350:	25 9f       	mul	r18, r21
    2352:	90 0d       	add	r25, r0
    2354:	34 9f       	mul	r19, r20
    2356:	90 0d       	add	r25, r0
    2358:	11 24       	eor	r1, r1
    235a:	9c 01       	movw	r18, r24
    235c:	44 27       	eor	r20, r20
    235e:	37 fd       	sbrc	r19, 7
    2360:	40 95       	com	r20
    2362:	54 2f       	mov	r21, r20
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	92 e1       	ldi	r25, 0x12	; 18
    2368:	aa e7       	ldi	r26, 0x7A	; 122
    236a:	b0 e0       	ldi	r27, 0x00	; 0
    236c:	bc 01       	movw	r22, r24
    236e:	cd 01       	movw	r24, r26
    2370:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__udivmodsi4>
    2374:	da 01       	movw	r26, r20
    2376:	c9 01       	movw	r24, r18
    2378:	01 97       	sbiw	r24, 0x01	; 1
    237a:	90 93 7e 00 	sts	0x007E, r25
    237e:	80 93 7d 00 	sts	0x007D, r24
    2382:	21 c0       	rjmp	.+66     	; 0x23c6 <UART_Init+0x46c>
    	                  break;
    case BaudRate_115200: g_UBRR_value= (uint16)(((F_CPU / (g_speed_mode_division_factor * 115200)))-1);
    2384:	80 91 7f 00 	lds	r24, 0x007F
    2388:	88 2f       	mov	r24, r24
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	a0 e0       	ldi	r26, 0x00	; 0
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	32 ec       	ldi	r19, 0xC2	; 194
    2394:	41 e0       	ldi	r20, 0x01	; 1
    2396:	50 e0       	ldi	r21, 0x00	; 0
    2398:	bc 01       	movw	r22, r24
    239a:	cd 01       	movw	r24, r26
    239c:	0e 94 c0 12 	call	0x2580	; 0x2580 <__mulsi3>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	9c 01       	movw	r18, r24
    23a6:	ad 01       	movw	r20, r26
    23a8:	80 e0       	ldi	r24, 0x00	; 0
    23aa:	92 e1       	ldi	r25, 0x12	; 18
    23ac:	aa e7       	ldi	r26, 0x7A	; 122
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	bc 01       	movw	r22, r24
    23b2:	cd 01       	movw	r24, r26
    23b4:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__udivmodsi4>
    23b8:	da 01       	movw	r26, r20
    23ba:	c9 01       	movw	r24, r18
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	90 93 7e 00 	sts	0x007E, r25
    23c2:	80 93 7d 00 	sts	0x007D, r24
    	                  break;
    }


    /*Configuration RX Interrupt*/
    switch(Config_Ptr ->rx_interrupt)
    23c6:	e9 81       	ldd	r30, Y+1	; 0x01
    23c8:	fa 81       	ldd	r31, Y+2	; 0x02
    23ca:	87 81       	ldd	r24, Z+7	; 0x07
    23cc:	28 2f       	mov	r18, r24
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	3e 83       	std	Y+6, r19	; 0x06
    23d2:	2d 83       	std	Y+5, r18	; 0x05
    23d4:	4d 81       	ldd	r20, Y+5	; 0x05
    23d6:	5e 81       	ldd	r21, Y+6	; 0x06
    23d8:	41 15       	cp	r20, r1
    23da:	51 05       	cpc	r21, r1
    23dc:	31 f0       	breq	.+12     	; 0x23ea <UART_Init+0x490>
    23de:	8d 81       	ldd	r24, Y+5	; 0x05
    23e0:	9e 81       	ldd	r25, Y+6	; 0x06
    23e2:	81 30       	cpi	r24, 0x01	; 1
    23e4:	91 05       	cpc	r25, r1
    23e6:	49 f0       	breq	.+18     	; 0x23fa <UART_Init+0x4a0>
    23e8:	0f c0       	rjmp	.+30     	; 0x2408 <UART_Init+0x4ae>
    {
    case RX_InterruptDisable: CLEAR_BIT(UCSRB,RXCIE);
    23ea:	aa e2       	ldi	r26, 0x2A	; 42
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	ea e2       	ldi	r30, 0x2A	; 42
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	8f 77       	andi	r24, 0x7F	; 127
    23f6:	8c 93       	st	X, r24
    23f8:	07 c0       	rjmp	.+14     	; 0x2408 <UART_Init+0x4ae>
                              break;
    case RX_InterruptEnable:  SET_BIT(UCSRB,RXCIE);
    23fa:	aa e2       	ldi	r26, 0x2A	; 42
    23fc:	b0 e0       	ldi	r27, 0x00	; 0
    23fe:	ea e2       	ldi	r30, 0x2A	; 42
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	80 81       	ld	r24, Z
    2404:	80 68       	ori	r24, 0x80	; 128
    2406:	8c 93       	st	X, r24
                              break;

    }

    /*Configuration TX Interrupt*/
    switch(Config_Ptr ->tx_interrupt)
    2408:	e9 81       	ldd	r30, Y+1	; 0x01
    240a:	fa 81       	ldd	r31, Y+2	; 0x02
    240c:	80 85       	ldd	r24, Z+8	; 0x08
    240e:	28 2f       	mov	r18, r24
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	3c 83       	std	Y+4, r19	; 0x04
    2414:	2b 83       	std	Y+3, r18	; 0x03
    2416:	4b 81       	ldd	r20, Y+3	; 0x03
    2418:	5c 81       	ldd	r21, Y+4	; 0x04
    241a:	41 15       	cp	r20, r1
    241c:	51 05       	cpc	r21, r1
    241e:	31 f0       	breq	.+12     	; 0x242c <UART_Init+0x4d2>
    2420:	8b 81       	ldd	r24, Y+3	; 0x03
    2422:	9c 81       	ldd	r25, Y+4	; 0x04
    2424:	81 30       	cpi	r24, 0x01	; 1
    2426:	91 05       	cpc	r25, r1
    2428:	49 f0       	breq	.+18     	; 0x243c <UART_Init+0x4e2>
    242a:	0f c0       	rjmp	.+30     	; 0x244a <UART_Init+0x4f0>
    {
    case TX_InterruptDisable: CLEAR_BIT(UCSRB,TXCIE);
    242c:	aa e2       	ldi	r26, 0x2A	; 42
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	ea e2       	ldi	r30, 0x2A	; 42
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	80 81       	ld	r24, Z
    2436:	8f 7b       	andi	r24, 0xBF	; 191
    2438:	8c 93       	st	X, r24
    243a:	07 c0       	rjmp	.+14     	; 0x244a <UART_Init+0x4f0>
                              break;
    case TX_InterruptEnable:  SET_BIT(UCSRB,TXCIE);
    243c:	aa e2       	ldi	r26, 0x2A	; 42
    243e:	b0 e0       	ldi	r27, 0x00	; 0
    2440:	ea e2       	ldi	r30, 0x2A	; 42
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	80 81       	ld	r24, Z
    2446:	80 64       	ori	r24, 0x40	; 64
    2448:	8c 93       	st	X, r24
                              break;

    }

}
    244a:	64 96       	adiw	r28, 0x14	; 20
    244c:	0f b6       	in	r0, 0x3f	; 63
    244e:	f8 94       	cli
    2450:	de bf       	out	0x3e, r29	; 62
    2452:	0f be       	out	0x3f, r0	; 63
    2454:	cd bf       	out	0x3d, r28	; 61
    2456:	cf 91       	pop	r28
    2458:	df 91       	pop	r29
    245a:	08 95       	ret

0000245c <UART_sendByte>:



void UART_sendByte(const uint8 data)
{
    245c:	df 93       	push	r29
    245e:	cf 93       	push	r28
    2460:	0f 92       	push	r0
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
    2466:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2468:	eb e2       	ldi	r30, 0x2B	; 43
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	80 81       	ld	r24, Z
    246e:	88 2f       	mov	r24, r24
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	80 72       	andi	r24, 0x20	; 32
    2474:	90 70       	andi	r25, 0x00	; 0
    2476:	00 97       	sbiw	r24, 0x00	; 0
    2478:	b9 f3       	breq	.-18     	; 0x2468 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    247a:	ec e2       	ldi	r30, 0x2C	; 44
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	89 81       	ldd	r24, Y+1	; 0x01
    2480:	80 83       	st	Z, r24
}
    2482:	0f 90       	pop	r0
    2484:	cf 91       	pop	r28
    2486:	df 91       	pop	r29
    2488:	08 95       	ret

0000248a <UART_receiveByte>:


uint8 UART_receiveByte(void)
{
    248a:	df 93       	push	r29
    248c:	cf 93       	push	r28
    248e:	cd b7       	in	r28, 0x3d	; 61
    2490:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2492:	eb e2       	ldi	r30, 0x2B	; 43
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	80 81       	ld	r24, Z
    2498:	88 23       	and	r24, r24
    249a:	dc f7       	brge	.-10     	; 0x2492 <UART_receiveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    249c:	ec e2       	ldi	r30, 0x2C	; 44
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	80 81       	ld	r24, Z
}
    24a2:	cf 91       	pop	r28
    24a4:	df 91       	pop	r29
    24a6:	08 95       	ret

000024a8 <UART_sendString>:


void UART_sendString( const uint8 * Str)
{
    24a8:	df 93       	push	r29
    24aa:	cf 93       	push	r28
    24ac:	00 d0       	rcall	.+0      	; 0x24ae <UART_sendString+0x6>
    24ae:	0f 92       	push	r0
    24b0:	cd b7       	in	r28, 0x3d	; 61
    24b2:	de b7       	in	r29, 0x3e	; 62
    24b4:	9b 83       	std	Y+3, r25	; 0x03
    24b6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    24b8:	19 82       	std	Y+1, r1	; 0x01
    24ba:	0e c0       	rjmp	.+28     	; 0x24d8 <UART_sendString+0x30>

		/* Send the whole string */
		while(Str[i] != '\0')
		{
			UART_sendByte(Str[i]);
    24bc:	89 81       	ldd	r24, Y+1	; 0x01
    24be:	28 2f       	mov	r18, r24
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	8a 81       	ldd	r24, Y+2	; 0x02
    24c4:	9b 81       	ldd	r25, Y+3	; 0x03
    24c6:	fc 01       	movw	r30, r24
    24c8:	e2 0f       	add	r30, r18
    24ca:	f3 1f       	adc	r31, r19
    24cc:	80 81       	ld	r24, Z
    24ce:	0e 94 2e 12 	call	0x245c	; 0x245c <UART_sendByte>
			i++;
    24d2:	89 81       	ldd	r24, Y+1	; 0x01
    24d4:	8f 5f       	subi	r24, 0xFF	; 255
    24d6:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString( const uint8 * Str)
{
	uint8 i = 0;

		/* Send the whole string */
		while(Str[i] != '\0')
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
    24da:	28 2f       	mov	r18, r24
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	8a 81       	ldd	r24, Y+2	; 0x02
    24e0:	9b 81       	ldd	r25, Y+3	; 0x03
    24e2:	fc 01       	movw	r30, r24
    24e4:	e2 0f       	add	r30, r18
    24e6:	f3 1f       	adc	r31, r19
    24e8:	80 81       	ld	r24, Z
    24ea:	88 23       	and	r24, r24
    24ec:	39 f7       	brne	.-50     	; 0x24bc <UART_sendString+0x14>
		{
			UART_sendByte(Str[i]);
			i++;
		}
}
    24ee:	0f 90       	pop	r0
    24f0:	0f 90       	pop	r0
    24f2:	0f 90       	pop	r0
    24f4:	cf 91       	pop	r28
    24f6:	df 91       	pop	r29
    24f8:	08 95       	ret

000024fa <UART_receiveString>:


void UART_receiveString (uint8 *Str)
{
    24fa:	0f 93       	push	r16
    24fc:	1f 93       	push	r17
    24fe:	df 93       	push	r29
    2500:	cf 93       	push	r28
    2502:	00 d0       	rcall	.+0      	; 0x2504 <UART_receiveString+0xa>
    2504:	0f 92       	push	r0
    2506:	cd b7       	in	r28, 0x3d	; 61
    2508:	de b7       	in	r29, 0x3e	; 62
    250a:	9b 83       	std	Y+3, r25	; 0x03
    250c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    250e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
    2510:	89 81       	ldd	r24, Y+1	; 0x01
    2512:	28 2f       	mov	r18, r24
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	8a 81       	ldd	r24, Y+2	; 0x02
    2518:	9b 81       	ldd	r25, Y+3	; 0x03
    251a:	8c 01       	movw	r16, r24
    251c:	02 0f       	add	r16, r18
    251e:	13 1f       	adc	r17, r19
    2520:	0e 94 45 12 	call	0x248a	; 0x248a <UART_receiveByte>
    2524:	f8 01       	movw	r30, r16
    2526:	80 83       	st	Z, r24
    2528:	0f c0       	rjmp	.+30     	; 0x2548 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    252a:	89 81       	ldd	r24, Y+1	; 0x01
    252c:	8f 5f       	subi	r24, 0xFF	; 255
    252e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    2530:	89 81       	ldd	r24, Y+1	; 0x01
    2532:	28 2f       	mov	r18, r24
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	8a 81       	ldd	r24, Y+2	; 0x02
    2538:	9b 81       	ldd	r25, Y+3	; 0x03
    253a:	8c 01       	movw	r16, r24
    253c:	02 0f       	add	r16, r18
    253e:	13 1f       	adc	r17, r19
    2540:	0e 94 45 12 	call	0x248a	; 0x248a <UART_receiveByte>
    2544:	f8 01       	movw	r30, r16
    2546:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2548:	89 81       	ldd	r24, Y+1	; 0x01
    254a:	28 2f       	mov	r18, r24
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	8a 81       	ldd	r24, Y+2	; 0x02
    2550:	9b 81       	ldd	r25, Y+3	; 0x03
    2552:	fc 01       	movw	r30, r24
    2554:	e2 0f       	add	r30, r18
    2556:	f3 1f       	adc	r31, r19
    2558:	80 81       	ld	r24, Z
    255a:	83 32       	cpi	r24, 0x23	; 35
    255c:	31 f7       	brne	.-52     	; 0x252a <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	28 2f       	mov	r18, r24
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	8a 81       	ldd	r24, Y+2	; 0x02
    2566:	9b 81       	ldd	r25, Y+3	; 0x03
    2568:	fc 01       	movw	r30, r24
    256a:	e2 0f       	add	r30, r18
    256c:	f3 1f       	adc	r31, r19
    256e:	10 82       	st	Z, r1
}
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	0f 90       	pop	r0
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	1f 91       	pop	r17
    257c:	0f 91       	pop	r16
    257e:	08 95       	ret

00002580 <__mulsi3>:
    2580:	62 9f       	mul	r22, r18
    2582:	d0 01       	movw	r26, r0
    2584:	73 9f       	mul	r23, r19
    2586:	f0 01       	movw	r30, r0
    2588:	82 9f       	mul	r24, r18
    258a:	e0 0d       	add	r30, r0
    258c:	f1 1d       	adc	r31, r1
    258e:	64 9f       	mul	r22, r20
    2590:	e0 0d       	add	r30, r0
    2592:	f1 1d       	adc	r31, r1
    2594:	92 9f       	mul	r25, r18
    2596:	f0 0d       	add	r31, r0
    2598:	83 9f       	mul	r24, r19
    259a:	f0 0d       	add	r31, r0
    259c:	74 9f       	mul	r23, r20
    259e:	f0 0d       	add	r31, r0
    25a0:	65 9f       	mul	r22, r21
    25a2:	f0 0d       	add	r31, r0
    25a4:	99 27       	eor	r25, r25
    25a6:	72 9f       	mul	r23, r18
    25a8:	b0 0d       	add	r27, r0
    25aa:	e1 1d       	adc	r30, r1
    25ac:	f9 1f       	adc	r31, r25
    25ae:	63 9f       	mul	r22, r19
    25b0:	b0 0d       	add	r27, r0
    25b2:	e1 1d       	adc	r30, r1
    25b4:	f9 1f       	adc	r31, r25
    25b6:	bd 01       	movw	r22, r26
    25b8:	cf 01       	movw	r24, r30
    25ba:	11 24       	eor	r1, r1
    25bc:	08 95       	ret

000025be <__divmodhi4>:
    25be:	97 fb       	bst	r25, 7
    25c0:	09 2e       	mov	r0, r25
    25c2:	07 26       	eor	r0, r23
    25c4:	0a d0       	rcall	.+20     	; 0x25da <__divmodhi4_neg1>
    25c6:	77 fd       	sbrc	r23, 7
    25c8:	04 d0       	rcall	.+8      	; 0x25d2 <__divmodhi4_neg2>
    25ca:	49 d0       	rcall	.+146    	; 0x265e <__udivmodhi4>
    25cc:	06 d0       	rcall	.+12     	; 0x25da <__divmodhi4_neg1>
    25ce:	00 20       	and	r0, r0
    25d0:	1a f4       	brpl	.+6      	; 0x25d8 <__divmodhi4_exit>

000025d2 <__divmodhi4_neg2>:
    25d2:	70 95       	com	r23
    25d4:	61 95       	neg	r22
    25d6:	7f 4f       	sbci	r23, 0xFF	; 255

000025d8 <__divmodhi4_exit>:
    25d8:	08 95       	ret

000025da <__divmodhi4_neg1>:
    25da:	f6 f7       	brtc	.-4      	; 0x25d8 <__divmodhi4_exit>
    25dc:	90 95       	com	r25
    25de:	81 95       	neg	r24
    25e0:	9f 4f       	sbci	r25, 0xFF	; 255
    25e2:	08 95       	ret

000025e4 <__udivmodsi4>:
    25e4:	a1 e2       	ldi	r26, 0x21	; 33
    25e6:	1a 2e       	mov	r1, r26
    25e8:	aa 1b       	sub	r26, r26
    25ea:	bb 1b       	sub	r27, r27
    25ec:	fd 01       	movw	r30, r26
    25ee:	0d c0       	rjmp	.+26     	; 0x260a <__udivmodsi4_ep>

000025f0 <__udivmodsi4_loop>:
    25f0:	aa 1f       	adc	r26, r26
    25f2:	bb 1f       	adc	r27, r27
    25f4:	ee 1f       	adc	r30, r30
    25f6:	ff 1f       	adc	r31, r31
    25f8:	a2 17       	cp	r26, r18
    25fa:	b3 07       	cpc	r27, r19
    25fc:	e4 07       	cpc	r30, r20
    25fe:	f5 07       	cpc	r31, r21
    2600:	20 f0       	brcs	.+8      	; 0x260a <__udivmodsi4_ep>
    2602:	a2 1b       	sub	r26, r18
    2604:	b3 0b       	sbc	r27, r19
    2606:	e4 0b       	sbc	r30, r20
    2608:	f5 0b       	sbc	r31, r21

0000260a <__udivmodsi4_ep>:
    260a:	66 1f       	adc	r22, r22
    260c:	77 1f       	adc	r23, r23
    260e:	88 1f       	adc	r24, r24
    2610:	99 1f       	adc	r25, r25
    2612:	1a 94       	dec	r1
    2614:	69 f7       	brne	.-38     	; 0x25f0 <__udivmodsi4_loop>
    2616:	60 95       	com	r22
    2618:	70 95       	com	r23
    261a:	80 95       	com	r24
    261c:	90 95       	com	r25
    261e:	9b 01       	movw	r18, r22
    2620:	ac 01       	movw	r20, r24
    2622:	bd 01       	movw	r22, r26
    2624:	cf 01       	movw	r24, r30
    2626:	08 95       	ret

00002628 <__divmodsi4>:
    2628:	97 fb       	bst	r25, 7
    262a:	09 2e       	mov	r0, r25
    262c:	05 26       	eor	r0, r21
    262e:	0e d0       	rcall	.+28     	; 0x264c <__divmodsi4_neg1>
    2630:	57 fd       	sbrc	r21, 7
    2632:	04 d0       	rcall	.+8      	; 0x263c <__divmodsi4_neg2>
    2634:	d7 df       	rcall	.-82     	; 0x25e4 <__udivmodsi4>
    2636:	0a d0       	rcall	.+20     	; 0x264c <__divmodsi4_neg1>
    2638:	00 1c       	adc	r0, r0
    263a:	38 f4       	brcc	.+14     	; 0x264a <__divmodsi4_exit>

0000263c <__divmodsi4_neg2>:
    263c:	50 95       	com	r21
    263e:	40 95       	com	r20
    2640:	30 95       	com	r19
    2642:	21 95       	neg	r18
    2644:	3f 4f       	sbci	r19, 0xFF	; 255
    2646:	4f 4f       	sbci	r20, 0xFF	; 255
    2648:	5f 4f       	sbci	r21, 0xFF	; 255

0000264a <__divmodsi4_exit>:
    264a:	08 95       	ret

0000264c <__divmodsi4_neg1>:
    264c:	f6 f7       	brtc	.-4      	; 0x264a <__divmodsi4_exit>
    264e:	90 95       	com	r25
    2650:	80 95       	com	r24
    2652:	70 95       	com	r23
    2654:	61 95       	neg	r22
    2656:	7f 4f       	sbci	r23, 0xFF	; 255
    2658:	8f 4f       	sbci	r24, 0xFF	; 255
    265a:	9f 4f       	sbci	r25, 0xFF	; 255
    265c:	08 95       	ret

0000265e <__udivmodhi4>:
    265e:	aa 1b       	sub	r26, r26
    2660:	bb 1b       	sub	r27, r27
    2662:	51 e1       	ldi	r21, 0x11	; 17
    2664:	07 c0       	rjmp	.+14     	; 0x2674 <__udivmodhi4_ep>

00002666 <__udivmodhi4_loop>:
    2666:	aa 1f       	adc	r26, r26
    2668:	bb 1f       	adc	r27, r27
    266a:	a6 17       	cp	r26, r22
    266c:	b7 07       	cpc	r27, r23
    266e:	10 f0       	brcs	.+4      	; 0x2674 <__udivmodhi4_ep>
    2670:	a6 1b       	sub	r26, r22
    2672:	b7 0b       	sbc	r27, r23

00002674 <__udivmodhi4_ep>:
    2674:	88 1f       	adc	r24, r24
    2676:	99 1f       	adc	r25, r25
    2678:	5a 95       	dec	r21
    267a:	a9 f7       	brne	.-22     	; 0x2666 <__udivmodhi4_loop>
    267c:	80 95       	com	r24
    267e:	90 95       	com	r25
    2680:	bc 01       	movw	r22, r24
    2682:	cd 01       	movw	r24, r26
    2684:	08 95       	ret

00002686 <__prologue_saves__>:
    2686:	2f 92       	push	r2
    2688:	3f 92       	push	r3
    268a:	4f 92       	push	r4
    268c:	5f 92       	push	r5
    268e:	6f 92       	push	r6
    2690:	7f 92       	push	r7
    2692:	8f 92       	push	r8
    2694:	9f 92       	push	r9
    2696:	af 92       	push	r10
    2698:	bf 92       	push	r11
    269a:	cf 92       	push	r12
    269c:	df 92       	push	r13
    269e:	ef 92       	push	r14
    26a0:	ff 92       	push	r15
    26a2:	0f 93       	push	r16
    26a4:	1f 93       	push	r17
    26a6:	cf 93       	push	r28
    26a8:	df 93       	push	r29
    26aa:	cd b7       	in	r28, 0x3d	; 61
    26ac:	de b7       	in	r29, 0x3e	; 62
    26ae:	ca 1b       	sub	r28, r26
    26b0:	db 0b       	sbc	r29, r27
    26b2:	0f b6       	in	r0, 0x3f	; 63
    26b4:	f8 94       	cli
    26b6:	de bf       	out	0x3e, r29	; 62
    26b8:	0f be       	out	0x3f, r0	; 63
    26ba:	cd bf       	out	0x3d, r28	; 61
    26bc:	09 94       	ijmp

000026be <__epilogue_restores__>:
    26be:	2a 88       	ldd	r2, Y+18	; 0x12
    26c0:	39 88       	ldd	r3, Y+17	; 0x11
    26c2:	48 88       	ldd	r4, Y+16	; 0x10
    26c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    26c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    26c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    26ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    26cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    26ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    26d0:	b9 84       	ldd	r11, Y+9	; 0x09
    26d2:	c8 84       	ldd	r12, Y+8	; 0x08
    26d4:	df 80       	ldd	r13, Y+7	; 0x07
    26d6:	ee 80       	ldd	r14, Y+6	; 0x06
    26d8:	fd 80       	ldd	r15, Y+5	; 0x05
    26da:	0c 81       	ldd	r16, Y+4	; 0x04
    26dc:	1b 81       	ldd	r17, Y+3	; 0x03
    26de:	aa 81       	ldd	r26, Y+2	; 0x02
    26e0:	b9 81       	ldd	r27, Y+1	; 0x01
    26e2:	ce 0f       	add	r28, r30
    26e4:	d1 1d       	adc	r29, r1
    26e6:	0f b6       	in	r0, 0x3f	; 63
    26e8:	f8 94       	cli
    26ea:	de bf       	out	0x3e, r29	; 62
    26ec:	0f be       	out	0x3f, r0	; 63
    26ee:	cd bf       	out	0x3d, r28	; 61
    26f0:	ed 01       	movw	r28, r26
    26f2:	08 95       	ret

000026f4 <_exit>:
    26f4:	f8 94       	cli

000026f6 <__stop_program>:
    26f6:	ff cf       	rjmp	.-2      	; 0x26f6 <__stop_program>
